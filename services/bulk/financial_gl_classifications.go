// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package bulk

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// FinancialGLClassificationsEndpoint is responsible for communicating with
// the FinancialGLClassifications endpoint of the Bulk service.
type FinancialGLClassificationsEndpoint service

// FinancialGLClassifications:
// Service: Bulk
// Entity: FinancialGLClassifications
// URL: /api/v1/{division}/bulk/Financial/GLClassifications
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=BulkFinancialGLClassifications
type FinancialGLClassifications struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Abstract: Abstract elements are only used in presentation linkbases to group other elements. They are not supposed to be used in instance documents
	Abstract *bool `json:"Abstract,omitempty"`

	// Balance: Only used for amount concepts: in that case either &#39;debit&#39; or &#39;credit&#39;
	Balance *string `json:"Balance,omitempty"`

	// Code: The Code is unique
	Code *string `json:"Code,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the element. Note that this description is only used for division-specific taxonomies (or reporting schemes).
	Description *string `json:"Description,omitempty"`

	// Division: Division is optional. For taxonomies of Taxonomies.Type = 0 (general taxonomies), the Division is empty. For division specific taxonomies it is mandatory
	Division *int `json:"Division,omitempty"`

	// IsTupleSubElement: Obsolete
	IsTupleSubElement *bool `json:"IsTupleSubElement,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Name: The Name is unique in the namespace
	Name *string `json:"Name,omitempty"`

	// Nillable: Determines whether usage of the element is mandatory in an instance document
	Nillable *bool `json:"Nillable,omitempty"`

	// Parent: Parent element for reporting schemes. In a reporting scheme, an element can have only one parent. This column is only used for reporting schemes. Note that in a real taxonomy, elements can have multiple parents.
	Parent *types.GUID `json:"Parent,omitempty"`

	// PeriodType: Only used for item concepts: either &#39;instant&#39; or &#39;duration&#39;. &#39;instant&#39; is used for balance types of concepts, &#39;duration&#39; is used for P&amp;L types of concepts
	PeriodType *string `json:"PeriodType,omitempty"`

	// SubstitutionGroup: Mostly import sutstitutiongroup is xbrli:tuple, which makes the element a tuple concept. The default substitutiongroup for item concepts is xbrli:item
	SubstitutionGroup *string `json:"SubstitutionGroup,omitempty"`

	// TaxonomyNamespace: Namespace of the element
	TaxonomyNamespace *types.GUID `json:"TaxonomyNamespace,omitempty"`

	// TaxonomyNamespaceDescription: Description of TaxonomyNamespace
	TaxonomyNamespaceDescription *string `json:"TaxonomyNamespaceDescription,omitempty"`

	// Type: Type of the element
	Type *types.GUID `json:"Type,omitempty"`
}

func (e *FinancialGLClassifications) GetPrimary() *types.GUID {
	return e.ID
}

func (s *FinancialGLClassificationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Financial/GLClassifications", method)
}

// List the FinancialGLClassifications entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialGLClassificationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*FinancialGLClassifications, error) {
	var entities []*FinancialGLClassifications
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Financial/GLClassifications", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the FinancialGLClassifications entitiy in the provided division.
func (s *FinancialGLClassificationsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*FinancialGLClassifications, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Financial/GLClassifications", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &FinancialGLClassifications{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package bulk

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectProjectWBSEndpoint is responsible for communicating with
// the ProjectProjectWBS endpoint of the Bulk service.
type ProjectProjectWBSEndpoint service

// ProjectProjectWBS:
// Service: Bulk
// Entity: ProjectProjectWBS
// URL: /api/v1/{division}/bulk/Project/ProjectWBS
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=BulkProjectProjectWBS
type ProjectProjectWBS struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// AdditionalInvoicing: A boolean field to indicated if additional invoice is allowed on this WBS
	AdditionalInvoicing *byte `json:"AdditionalInvoicing,omitempty"`

	// BaselineDate: Baseline date of this deliverable
	BaselineDate *types.Date `json:"BaselineDate,omitempty"`

	// BlockEntry: A boolean field to indicated if time and cost entries is blocked
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// BlockRebilling: A boolean field to indicated if rebilling is blocked
	BlockRebilling *bool `json:"BlockRebilling,omitempty"`

	// BudgetOverrunHours: BudgetOverrunHours: 10-Allowed, 20-Not Allowed
	BudgetOverrunHours *byte `json:"BudgetOverrunHours,omitempty"`

	// Completed: A boolean field to indicated if the project WBS is completed
	Completed *byte `json:"Completed,omitempty"`

	// Cost: Budget cost of the WBS
	Cost *float64 `json:"Cost,omitempty"`

	// Created: Date and time the project was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: The Guid ID of user that created the project
	Creator *types.GUID `json:"Creator,omitempty"`

	// DefaultItem: Default Item to used for timecost entry
	DefaultItem *types.GUID `json:"DefaultItem,omitempty"`

	// DefaultItemIsMandatory: To indicated if only default item is allowed
	DefaultItemIsMandatory *byte `json:"DefaultItemIsMandatory,omitempty"`

	// Description: Description of the project WBS
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EndDate: EndDate of the WBS. If it is a deliverable then EndDate is the lastest EndDate of its children
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Hours: Budget quantity of the WBS
	Hours *float64 `json:"Hours,omitempty"`

	// InvoiceMethod: The invoice method of the WBS. E.g: 2 = Fixed price, 3 = Time and Material, 4 = Non billable, 5 = Prepaid
	InvoiceMethod *int `json:"InvoiceMethod,omitempty"`

	// IsBaseline: A boolean field to indicated if this is a baseline
	IsBaseline *byte `json:"IsBaseline,omitempty"`

	// Milestone: A boolean field to indicated if this is a milestone
	Milestone *byte `json:"Milestone,omitempty"`

	// Modified: Last modified date and time
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: The Guid ID of the user that modified the records
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// Notes: For additional information about wbs
	Notes *string `json:"Notes,omitempty"`

	// Parent: ID of the parent WBS
	Parent *types.GUID `json:"Parent,omitempty"`

	// Project: ID of the project that linked to WBS
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectTerm: ID of the invoice term that linked to the WBS
	ProjectTerm *types.GUID `json:"ProjectTerm,omitempty"`

	// PurchaseMarkupPercentage: Markup percentage
	PurchaseMarkupPercentage *float64 `json:"PurchaseMarkupPercentage,omitempty"`

	// Revenue: Revenue of the WBS
	Revenue *float64 `json:"Revenue,omitempty"`

	// SequenceNumber: Sequence Number
	SequenceNumber *int `json:"SequenceNumber,omitempty"`

	// StartDate: Startdate of the WBS. If it is a deliverable then StartDate is the earliest StartDate of its children
	StartDate *types.Date `json:"StartDate,omitempty"`

	// TimeQuantityToAlert: Alert when exceeding this time quantity
	TimeQuantityToAlert *float64 `json:"TimeQuantityToAlert,omitempty"`

	// Type: The type of project WBS. E.g: 1 = Deliverable, 2 = Activity, 3 = Expense
	Type *int `json:"Type,omitempty"`
}

func (e *ProjectProjectWBS) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectProjectWBSEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Project/ProjectWBS", method)
}

// List the ProjectProjectWBS entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectWBSEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectProjectWBS, error) {
	var entities []*ProjectProjectWBS
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Project/ProjectWBS", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectProjectWBS entitiy in the provided division.
func (s *ProjectProjectWBSEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ProjectProjectWBS, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/bulk/Project/ProjectWBS", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectProjectWBS{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

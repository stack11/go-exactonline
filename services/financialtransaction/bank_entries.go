// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financialtransaction

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// BankEntriesEndpoint is responsible for communicating with
// the BankEntries endpoint of the FinancialTransaction service.
type BankEntriesEndpoint service

// BankEntries:
// Service: FinancialTransaction
// Entity: BankEntries
// URL: /api/v1/{division}/financialtransaction/BankEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialTransactionBankEntries
type BankEntries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// BankEntryLines:
	BankEntryLines *json.RawMessage `json:"BankEntryLines,omitempty"`

	// BankStatementDocument:
	BankStatementDocument *types.GUID `json:"BankStatementDocument,omitempty"`

	// BankStatementDocumentNumber:
	BankStatementDocumentNumber *int `json:"BankStatementDocumentNumber,omitempty"`

	// BankStatementDocumentSubject:
	BankStatementDocumentSubject *string `json:"BankStatementDocumentSubject,omitempty"`

	// ClosingBalanceFC:
	ClosingBalanceFC *float64 `json:"ClosingBalanceFC,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// FinancialPeriod:
	FinancialPeriod *int `json:"FinancialPeriod,omitempty"`

	// FinancialYear:
	FinancialYear *int `json:"FinancialYear,omitempty"`

	// JournalCode:
	JournalCode *string `json:"JournalCode,omitempty"`

	// JournalDescription:
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// OpeningBalanceFC:
	OpeningBalanceFC *float64 `json:"OpeningBalanceFC,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// StatusDescription:
	StatusDescription *string `json:"StatusDescription,omitempty"`
}

func (e *BankEntries) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *BankEntriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financialtransaction/BankEntries", method)
}

// List the BankEntries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BankEntriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*BankEntries, error) {
	var entities []*BankEntries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the BankEntries entitiy in the provided division.
func (s *BankEntriesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*BankEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &BankEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty BankEntries entity
func (s *BankEntriesEndpoint) New() *BankEntries {
	return &BankEntries{}
}

// Create the BankEntries entity in the provided division.
func (s *BankEntriesEndpoint) Create(ctx context.Context, division int, entity *BankEntries) (*BankEntries, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financialtransaction/BankEntries", division) // #nosec
	e := &BankEntries{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

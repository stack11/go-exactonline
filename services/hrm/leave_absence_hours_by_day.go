// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package hrm

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// LeaveAbsenceHoursByDayEndpoint is responsible for communicating with
// the LeaveAbsenceHoursByDay endpoint of the HRM service.
type LeaveAbsenceHoursByDayEndpoint service

// LeaveAbsenceHoursByDay:
// Service: HRM
// Entity: LeaveAbsenceHoursByDay
// URL: /api/v1/{division}/hrm/LeaveAbsenceHoursByDay
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=HRMLeaveAbsenceHoursByDay
type LeaveAbsenceHoursByDay struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Date: Date of leave or absence
	Date *types.Date `json:"Date,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: ID of employee linked to the leave or absence
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Employee full name
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: Employment ID
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Numeric ID of the employment
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EndTime: End time of leave or absence
	EndTime *types.Date `json:"EndTime,omitempty"`

	// ExternalIDInt: Unique ID from external source. Eg. Exact Online HR
	ExternalIDInt *int64 `json:"ExternalIDInt,omitempty"`

	// ExternalLeaveAbsenceType: Unique leave or absence type from external source. Eg. Exact Online HR
	ExternalLeaveAbsenceType *int64 `json:"ExternalLeaveAbsenceType,omitempty"`

	// Hours: Hours of leave or absence
	Hours *float64 `json:"Hours,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// StartTime: Start time of leave or absence
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Status, 1 = Submitted, 2 = ApprovedNote: Submitted status is only applicable for Type = Leave
	Status *int `json:"Status,omitempty"`

	// Type: Type, 0 = Leave, 1 = AbsenceNote: Absence type is only allow for Status = Approved
	Type *int `json:"Type,omitempty"`
}

func (e *LeaveAbsenceHoursByDay) GetPrimary() *types.GUID {
	return e.ID
}

func (s *LeaveAbsenceHoursByDayEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "hrm/LeaveAbsenceHoursByDay", method)
}

// List the LeaveAbsenceHoursByDay entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *LeaveAbsenceHoursByDayEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*LeaveAbsenceHoursByDay, error) {
	var entities []*LeaveAbsenceHoursByDay
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/hrm/LeaveAbsenceHoursByDay", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the LeaveAbsenceHoursByDay entitiy in the provided division.
func (s *LeaveAbsenceHoursByDayEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*LeaveAbsenceHoursByDay, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/hrm/LeaveAbsenceHoursByDay", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &LeaveAbsenceHoursByDay{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

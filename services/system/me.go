// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package system

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// MeEndpoint is responsible for communicating with
// the Me endpoint of the System service.
type MeEndpoint service

// Me:
// Service: System
// Entity: Me
// URL: /api/v1/current/Me
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SystemSystemMe
type Me struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// UserID: Primary key
	UserID *types.GUID `json:"UserID,omitempty"`

	// AccountingDivision: Accounting division number
	AccountingDivision *int `json:"AccountingDivision,omitempty"`

	// CurrentDivision: Division number that is currently used in the API. You should use a division number in the url
	CurrentDivision *int `json:"CurrentDivision,omitempty"`

	// CustomerCode: Account code of the logged in user.
	CustomerCode *string `json:"CustomerCode,omitempty"`

	// DivisionCustomer: Owner account of the division
	DivisionCustomer *types.GUID `json:"DivisionCustomer,omitempty"`

	// DivisionCustomerCode: Owner account code of the division
	DivisionCustomerCode *string `json:"DivisionCustomerCode,omitempty"`

	// DivisionCustomerName: Owner account name of the division
	DivisionCustomerName *string `json:"DivisionCustomerName,omitempty"`

	// DivisionCustomerSiretNumber: Owner account SIRET Number of the division for French legislation
	DivisionCustomerSiretNumber *string `json:"DivisionCustomerSiretNumber,omitempty"`

	// DivisionCustomerVatNumber: Owner account VAT Number of the division
	DivisionCustomerVatNumber *string `json:"DivisionCustomerVatNumber,omitempty"`

	// DossierDivision: Dossier division number (optional)
	DossierDivision *int `json:"DossierDivision,omitempty"`

	// Email: Email address of the user
	Email *string `json:"Email,omitempty"`

	// EmployeeID: Employee ID
	EmployeeID *types.GUID `json:"EmployeeID,omitempty"`

	// FirstName: First name
	FirstName *string `json:"FirstName,omitempty"`

	// FullName: Full name of the user
	FullName *string `json:"FullName,omitempty"`

	// Gender: Gender: M=Male, V=Female, O=Unknown
	Gender *string `json:"Gender,omitempty"`

	// Initials: Initials
	Initials *string `json:"Initials,omitempty"`

	// IsClientUser: Client user of an accountant: either a portal user or a non-accountant user with his own license (internal use)
	IsClientUser *bool `json:"IsClientUser,omitempty"`

	// IsMyFirmLiteUser: MyFirm lite user of accountant with limited access and specific start page (internal use)
	IsMyFirmLiteUser *bool `json:"IsMyFirmLiteUser,omitempty"`

	// IsMyFirmPortalUser: MyFirm user of accountant with limited access and specific start page (internal use)
	IsMyFirmPortalUser *bool `json:"IsMyFirmPortalUser,omitempty"`

	// Language: Language spoken by this user
	Language *string `json:"Language,omitempty"`

	// LanguageCode: Language (culture) that is used in Exact Online
	LanguageCode *string `json:"LanguageCode,omitempty"`

	// LastName: Last name
	LastName *string `json:"LastName,omitempty"`

	// Legislation: Legislation
	Legislation *int64 `json:"Legislation,string,omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:"MiddleName,omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:"Mobile,omitempty"`

	// Nationality: Nationality
	Nationality *string `json:"Nationality,omitempty"`

	// Phone: Phone number
	Phone *string `json:"Phone,omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:"PhoneExtension,omitempty"`

	// PictureUrl: Url that can be used to retrieve the picture of the user
	PictureUrl *string `json:"PictureUrl,omitempty"`

	// ServerTime: The current date and time in Exact Online
	ServerTime *string `json:"ServerTime,omitempty"`

	// ServerUtcOffset: The time difference with UTC in seconds
	ServerUtcOffset *float64 `json:"ServerUtcOffset,omitempty"`

	// ThumbnailPicture: Binary thumbnail picture of this user (This property will never return value and will be removed in the near future.)
	ThumbnailPicture *[]byte `json:"ThumbnailPicture,omitempty"`

	// ThumbnailPictureFormat: File type of the picture (This property will never return value and will be removed in the near future.)
	ThumbnailPictureFormat *string `json:"ThumbnailPictureFormat,omitempty"`

	// Title: Title
	Title *string `json:"Title,omitempty"`

	// UserName: Login name of the user
	UserName *string `json:"UserName,omitempty"`
}

func (e *Me) GetPrimary() *types.GUID {
	return e.UserID
}

func (s *MeEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "current/Me", method)
}

// List the Me entities.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *MeEndpoint) List(ctx context.Context, all bool, o *api.ListOptions) ([]*Me, error) {
	var entities []*Me
	u, _ := s.client.ResolveURL("/api/v1/current/Me") // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Me entitiy.
func (s *MeEndpoint) Get(ctx context.Context, id *types.GUID) (*Me, error) {
	b, _ := s.client.ResolveURL("/api/v1/current/Me") // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Me{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package activities

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ServiceRequestsEndpoint is responsible for communicating with
// the ServiceRequests endpoint of the Activities service.
type ServiceRequestsEndpoint service

// ServiceRequests:
// Service: Activities
// Entity: ServiceRequests
// URL: /api/v1/{division}/activities/ServiceRequests
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ActivitiesServiceRequests
type ServiceRequests struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: The Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: The account that is related to the service request
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName: The name of the account
	AccountName *string `json:"AccountName,omitempty"`

	// AssignedTo: The user that the service request is assigned to
	AssignedTo *types.GUID `json:"AssignedTo,omitempty"`

	// AssignedToFullName: The user name
	AssignedToFullName *string `json:"AssignedToFullName,omitempty"`

	// Attachments: Attachments linked to the service request
	Attachments *json.RawMessage `json:"Attachments,omitempty"`

	// Contact: The contact person that is related to the service request
	Contact *types.GUID `json:"Contact,omitempty"`

	// ContactFullName: The name of the contact person
	ContactFullName *string `json:"ContactFullName,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: The description
	Description *string `json:"Description,omitempty"`

	// Division: The division
	Division *int `json:"Division,omitempty"`

	// Document: The document that is linked to the service request
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: The subject of the document
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// HID: The human readable key
	HID *int `json:"HID,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NextAction: The date indicating by when the next action has to be taken
	NextAction *types.Date `json:"NextAction,omitempty"`

	// Notes: The notes of the service request
	Notes *string `json:"Notes,omitempty"`

	// ReceiptDate: The date the service request was received
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// Status: Status: 0 = Void, 5 = Rejected, 10 = Draft, 20 = Open, 30 = Approved, 40 = Realized, 50 = Processed
	Status *int `json:"Status,omitempty"`

	// StatusDescription: The description of the status
	StatusDescription *string `json:"StatusDescription,omitempty"`
}

func (e *ServiceRequests) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ServiceRequestsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "activities/ServiceRequests", method)
}

// List the ServiceRequests entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ServiceRequestsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ServiceRequests, error) {
	var entities []*ServiceRequests
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/ServiceRequests", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ServiceRequests entitiy in the provided division.
func (s *ServiceRequestsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ServiceRequests, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/ServiceRequests", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ServiceRequests{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ServiceRequests entity
func (s *ServiceRequestsEndpoint) New() *ServiceRequests {
	return &ServiceRequests{}
}

// Create the ServiceRequests entity in the provided division.
func (s *ServiceRequestsEndpoint) Create(ctx context.Context, division int, entity *ServiceRequests) (*ServiceRequests, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/activities/ServiceRequests", division) // #nosec
	e := &ServiceRequests{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

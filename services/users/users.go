// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package users

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// UsersEndpoint is responsible for communicating with
// the Users endpoint of the Users service.
type UsersEndpoint service

// Users:
// Service: Users
// Entity: Users
// URL: /api/v1/{division}/users/Users
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=UsersUsers
type Users struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// UserID: Primary key
	UserID *types.GUID `json:"UserID,omitempty"`

	// BirthDate: Birth date
	BirthDate *types.Date `json:"BirthDate,omitempty"`

	// BirthName: Birth name
	BirthName *string `json:"BirthName,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Customer: Customer the user belongs to
	Customer *types.GUID `json:"Customer,omitempty"`

	// CustomerName: Name of Customer
	CustomerName *string `json:"CustomerName,omitempty"`

	// Email: Email address of the user
	Email *string `json:"Email,omitempty"`

	// EndDate: Date after which the user login is disabled. NULL means no enddate
	EndDate *types.Date `json:"EndDate,omitempty"`

	// FirstName: First name
	FirstName *string `json:"FirstName,omitempty"`

	// FullName: Full name of the user
	FullName *string `json:"FullName,omitempty"`

	// Gender: Gender: M=Male, V=Female, O=Unknown
	Gender *string `json:"Gender,omitempty"`

	// HasRegisteredForTwoStepVerification: User has completed registration of Two-Step verification
	HasRegisteredForTwoStepVerification *bool `json:"HasRegisteredForTwoStepVerification,omitempty"`

	// HasTwoStepVerification: User must use Two-Step verification to log in
	HasTwoStepVerification *bool `json:"HasTwoStepVerification,omitempty"`

	// Initials: Initials
	Initials *string `json:"Initials,omitempty"`

	// IsAnonymised: Indicates whether the user is anonymised.
	IsAnonymised *byte `json:"IsAnonymised,omitempty"`

	// Language: Language (culture) that is used in Exact Online
	Language *string `json:"Language,omitempty"`

	// LastLogin: The last time this user logged in
	LastLogin *types.Date `json:"LastLogin,omitempty"`

	// LastName: Last name
	LastName *string `json:"LastName,omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:"MiddleName,omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:"Mobile,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Nationality: Nationality
	Nationality *string `json:"Nationality,omitempty"`

	// Notes: Remarks
	Notes *string `json:"Notes,omitempty"`

	// Phone: Phone number
	Phone *string `json:"Phone,omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:"PhoneExtension,omitempty"`

	// ProfileCode: Profile code
	ProfileCode *string `json:"ProfileCode,omitempty"`

	// StartDate: Startdate after which the login is allowed. If the start date is NULL the login is allowed as well
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartDivision: Start Division
	StartDivision *int `json:"StartDivision,omitempty"`

	// Title: Title
	Title *string `json:"Title,omitempty"`

	// UserName: Login name of the user
	UserName *string `json:"UserName,omitempty"`

	// UserRoles: Collection of user roles
	UserRoles *json.RawMessage `json:"UserRoles,omitempty"`

	// UserRolesPerDivision: Collection of user roles per division
	UserRolesPerDivision *json.RawMessage `json:"UserRolesPerDivision,omitempty"`

	// UserTypesList: Obsolete
	UserTypesList *string `json:"UserTypesList,omitempty"`
}

func (e *Users) GetPrimary() *types.GUID {
	return e.UserID
}

func (s *UsersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "users/Users", method)
}

// List the Users entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *UsersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Users, error) {
	var entities []*Users
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/users/Users", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Users entitiy in the provided division.
func (s *UsersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Users, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/users/Users", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Users{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package crm

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// BankAccountsEndpoint is responsible for communicating with
// the BankAccounts endpoint of the CRM service.
type BankAccountsEndpoint service

// BankAccounts:
// Service: CRM
// Entity: BankAccounts
// URL: /api/v1/{division}/crm/BankAccounts
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMBankAccounts
type BankAccounts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// Account:
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// Bank:
	Bank *types.GUID `json:"Bank,omitempty"`

	// BankAccount:
	BankAccount *string `json:"BankAccount,omitempty"`

	// BankAccountHolderName:
	BankAccountHolderName *string `json:"BankAccountHolderName,omitempty"`

	// BankDescription:
	BankDescription *string `json:"BankDescription,omitempty"`

	// BankName:
	BankName *string `json:"BankName,omitempty"`

	// BICCode:
	BICCode *string `json:"BICCode,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Format:
	Format *string `json:"Format,omitempty"`

	// IBAN:
	IBAN *string `json:"IBAN,omitempty"`

	// Main:
	Main *bool `json:"Main,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentServiceAccount:
	PaymentServiceAccount *types.GUID `json:"PaymentServiceAccount,omitempty"`

	// Type:
	Type *string `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (e *BankAccounts) GetPrimary() *types.GUID {
	return e.ID
}

func (s *BankAccountsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "crm/BankAccounts", method)
}

// List the BankAccounts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BankAccountsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*BankAccounts, error) {
	var entities []*BankAccounts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the BankAccounts entitiy in the provided division.
func (s *BankAccountsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*BankAccounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &BankAccounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty BankAccounts entity
func (s *BankAccountsEndpoint) New() *BankAccounts {
	return &BankAccounts{}
}

// Create the BankAccounts entity in the provided division.
func (s *BankAccountsEndpoint) Create(ctx context.Context, division int, entity *BankAccounts) (*BankAccounts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts", division) // #nosec
	e := &BankAccounts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the BankAccounts entity in the provided division.
func (s *BankAccountsEndpoint) Update(ctx context.Context, division int, entity *BankAccounts) (*BankAccounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &BankAccounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the BankAccounts entity in the provided division.
func (s *BankAccountsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/BankAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

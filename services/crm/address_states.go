// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package crm

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// AddressStatesEndpoint is responsible for communicating with
// the AddressStates endpoint of the CRM service.
type AddressStatesEndpoint service

// AddressStates:
// Service: CRM
// Entity: AddressStates
// URL: /api/v1/{division}/crm/AddressStates
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CRMAddressStates
type AddressStates struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Country: Country code
	Country *string `json:"Country,omitempty"`

	// DisplayValue: Description of state prefixed with the code
	DisplayValue *string `json:"DisplayValue,omitempty"`

	// Latitude: Latitude
	Latitude *float64 `json:"Latitude,omitempty"`

	// Longitude: Longitude
	Longitude *float64 `json:"Longitude,omitempty"`

	// Name: State name
	Name *string `json:"Name,omitempty"`

	// State: State code
	State *string `json:"State,omitempty"`
}

func (e *AddressStates) GetPrimary() *types.GUID {
	return e.ID
}

func (s *AddressStatesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "crm/AddressStates", method)
}

// List the AddressStates entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AddressStatesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*AddressStates, error) {
	var entities []*AddressStates
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/AddressStates", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the AddressStates entitiy in the provided division.
func (s *AddressStatesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*AddressStates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/crm/AddressStates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &AddressStates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package budget

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// BudgetsEndpoint is responsible for communicating with
// the Budgets endpoint of the Budget service.
type BudgetsEndpoint service

// Budgets:
// Service: Budget
// Entity: Budgets
// URL: /api/v1/{division}/budget/Budgets
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=BudgetBudgets
type Budgets struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC: Budget amount (always in the default currency of the company)
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// BudgetScenario: Budget scenario
	BudgetScenario *types.GUID `json:"BudgetScenario,omitempty"`

	// BudgetScenarioCode: Code of BudgetScenario
	BudgetScenarioCode *string `json:"BudgetScenarioCode,omitempty"`

	// BudgetScenarioDescription: Description of BudgetScenario
	BudgetScenarioDescription *string `json:"BudgetScenarioDescription,omitempty"`

	// Costcenter: Used for cost center-specific budgets - NULL otherwise
	Costcenter *string `json:"Costcenter,omitempty"`

	// CostcenterDescription: Description of Costcenter
	CostcenterDescription *string `json:"CostcenterDescription,omitempty"`

	// Costunit: Used for cost unit-specific budgets - NULL otherwise
	Costunit *string `json:"Costunit,omitempty"`

	// CostunitDescription: Description of Costunit
	CostunitDescription *string `json:"CostunitDescription,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// GLAccount: G/L account
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode: Code of GLAccount
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription: Description of GLAccount
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// HID: Numerical ID. Never displayed to the user, but it may have its use for performance reasons
	HID *int64 `json:"HID,omitempty"`

	// Item: Used for item-specific budgets - NULL otherwise
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of Item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ReportingPeriod: Period (combined with financial year)
	ReportingPeriod *int `json:"ReportingPeriod,omitempty"`

	// ReportingYear: Financial year
	ReportingYear *int `json:"ReportingYear,omitempty"`
}

func (e *Budgets) GetPrimary() *types.GUID {
	return e.ID
}

func (s *BudgetsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "budget/Budgets", method)
}

// List the Budgets entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BudgetsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Budgets, error) {
	var entities []*Budgets
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/budget/Budgets", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Budgets entitiy in the provided division.
func (s *BudgetsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Budgets, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/budget/Budgets", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Budgets{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

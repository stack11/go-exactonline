// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package accountancy

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// InvolvedUsersEndpoint is responsible for communicating with
// the InvolvedUsers endpoint of the Accountancy service.
type InvolvedUsersEndpoint service

// InvolvedUsers:
// Service: Accountancy
// Entity: InvolvedUsers
// URL: /api/v1/{division}/accountancy/InvolvedUsers
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=AccountancyInvolvedUsers
type InvolvedUsers struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: ID of the account the user is involved with
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCity: City of the account
	AccountCity *string `json:"AccountCity,omitempty"`

	// AccountCode: Code of the account
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountIsSupplier: Supplier flag of the account
	AccountIsSupplier *bool `json:"AccountIsSupplier,omitempty"`

	// AccountLogoThumbnailUrl: Logo thumbnail url of the account
	AccountLogoThumbnailUrl *string `json:"AccountLogoThumbnailUrl,omitempty"`

	// AccountName: Name of the account
	AccountName *string `json:"AccountName,omitempty"`

	// AccountStatus: Status of the account
	AccountStatus *string `json:"AccountStatus,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// InvolvedUserRole: ID of the user role
	InvolvedUserRole *types.GUID `json:"InvolvedUserRole,omitempty"`

	// InvolvedUserRoleDescription: Description of the user role
	InvolvedUserRoleDescription *string `json:"InvolvedUserRoleDescription,omitempty"`

	// IsMainContact: Main contact flag of the involved user
	IsMainContact *bool `json:"IsMainContact,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PersonEmail: Email of a person
	PersonEmail *string `json:"PersonEmail,omitempty"`

	// PersonPhone: Phone of a person
	PersonPhone *string `json:"PersonPhone,omitempty"`

	// PersonPhoneExtension: Phone extension of a person
	PersonPhoneExtension *string `json:"PersonPhoneExtension,omitempty"`

	// PersonPictureThumbnailUrl: Picture thumbnail url of a person
	PersonPictureThumbnailUrl *string `json:"PersonPictureThumbnailUrl,omitempty"`

	// User: ID of the involved user
	User *types.GUID `json:"User,omitempty"`

	// UserFullName: User name of creator
	UserFullName *string `json:"UserFullName,omitempty"`
}

func (e *InvolvedUsers) GetPrimary() *types.GUID {
	return e.ID
}

func (s *InvolvedUsersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "accountancy/InvolvedUsers", method)
}

// List the InvolvedUsers entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InvolvedUsersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*InvolvedUsers, error) {
	var entities []*InvolvedUsers
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/InvolvedUsers", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the InvolvedUsers entitiy in the provided division.
func (s *InvolvedUsersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*InvolvedUsers, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/InvolvedUsers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &InvolvedUsers{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty InvolvedUsers entity
func (s *InvolvedUsersEndpoint) New() *InvolvedUsers {
	return &InvolvedUsers{}
}

// Create the InvolvedUsers entity in the provided division.
func (s *InvolvedUsersEndpoint) Create(ctx context.Context, division int, entity *InvolvedUsers) (*InvolvedUsers, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/InvolvedUsers", division) // #nosec
	e := &InvolvedUsers{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the InvolvedUsers entity in the provided division.
func (s *InvolvedUsersEndpoint) Update(ctx context.Context, division int, entity *InvolvedUsers) (*InvolvedUsers, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/InvolvedUsers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &InvolvedUsers{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the InvolvedUsers entity in the provided division.
func (s *InvolvedUsersEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/accountancy/InvolvedUsers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

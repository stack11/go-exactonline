// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesentry

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SalesEntryLinesEndpoint is responsible for communicating with
// the SalesEntryLines endpoint of the SalesEntry service.
type SalesEntryLinesEndpoint service

// SalesEntryLines:
// Service: SalesEntry
// Entity: SalesEntryLines
// URL: /api/v1/{division}/salesentry/SalesEntryLines
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesEntrySalesEntryLines
type SalesEntryLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Asset:
	Asset *types.GUID `json:"Asset,omitempty"`

	// AssetDescription:
	AssetDescription *string `json:"AssetDescription,omitempty"`

	// CostCenter:
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription:
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit:
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription:
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// ExtraDutyAmountFC:
	ExtraDutyAmountFC *float64 `json:"ExtraDutyAmountFC,omitempty"`

	// ExtraDutyPercentage:
	ExtraDutyPercentage *float64 `json:"ExtraDutyPercentage,omitempty"`

	// From:
	From *types.Date `json:"From,omitempty"`

	// GLAccount:
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode:
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription:
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// IntraStatArea:
	IntraStatArea *string `json:"IntraStatArea,omitempty"`

	// IntraStatCountry:
	IntraStatCountry *string `json:"IntraStatCountry,omitempty"`

	// IntraStatDeliveryTerm:
	IntraStatDeliveryTerm *string `json:"IntraStatDeliveryTerm,omitempty"`

	// IntraStatTransactionA:
	IntraStatTransactionA *string `json:"IntraStatTransactionA,omitempty"`

	// IntraStatTransportMethod:
	IntraStatTransportMethod *string `json:"IntraStatTransportMethod,omitempty"`

	// LineNumber:
	LineNumber *int `json:"LineNumber,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// SerialNumber:
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// StatisticalNetWeight:
	StatisticalNetWeight *float64 `json:"StatisticalNetWeight,omitempty"`

	// StatisticalNumber:
	StatisticalNumber *string `json:"StatisticalNumber,omitempty"`

	// StatisticalQuantity:
	StatisticalQuantity *float64 `json:"StatisticalQuantity,omitempty"`

	// StatisticalValue:
	StatisticalValue *float64 `json:"StatisticalValue,omitempty"`

	// Subscription:
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription:
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// TaxSchedule:
	TaxSchedule *types.GUID `json:"TaxSchedule,omitempty"`

	// To:
	To *types.Date `json:"To,omitempty"`

	// TrackingNumber:
	TrackingNumber *types.GUID `json:"TrackingNumber,omitempty"`

	// TrackingNumberDescription:
	TrackingNumberDescription *string `json:"TrackingNumberDescription,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// VATAmountDC:
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// VATBaseAmountDC:
	VATBaseAmountDC *float64 `json:"VATBaseAmountDC,omitempty"`

	// VATBaseAmountFC:
	VATBaseAmountFC *float64 `json:"VATBaseAmountFC,omitempty"`

	// VATCode:
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription:
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`

	// VATPercentage:
	VATPercentage *float64 `json:"VATPercentage,omitempty"`
}

func (e *SalesEntryLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SalesEntryLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesentry/SalesEntryLines", method)
}

// List the SalesEntryLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesEntryLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesEntryLines, error) {
	var entities []*SalesEntryLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntryLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesEntryLines entitiy in the provided division.
func (s *SalesEntryLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SalesEntryLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesEntryLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SalesEntryLines entity
func (s *SalesEntryLinesEndpoint) New() *SalesEntryLines {
	return &SalesEntryLines{}
}

// Create the SalesEntryLines entity in the provided division.
func (s *SalesEntryLinesEndpoint) Create(ctx context.Context, division int, entity *SalesEntryLines) (*SalesEntryLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntryLines", division) // #nosec
	e := &SalesEntryLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SalesEntryLines entity in the provided division.
func (s *SalesEntryLinesEndpoint) Update(ctx context.Context, division int, entity *SalesEntryLines) (*SalesEntryLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SalesEntryLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SalesEntryLines entity in the provided division.
func (s *SalesEntryLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntryLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

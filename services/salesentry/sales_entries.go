// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesentry

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SalesEntriesEndpoint is responsible for communicating with
// the SalesEntries endpoint of the SalesEntry service.
type SalesEntriesEndpoint service

// SalesEntries:
// Service: SalesEntry
// Entity: SalesEntries
// URL: /api/v1/{division}/salesentry/SalesEntries
// HasWebhook: true
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesEntrySalesEntries
type SalesEntries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// BatchNumber:
	BatchNumber *int `json:"BatchNumber,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// Customer:
	Customer *types.GUID `json:"Customer,omitempty"`

	// CustomerName:
	CustomerName *string `json:"CustomerName,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Document:
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate:
	DueDate *types.Date `json:"DueDate,omitempty"`

	// EntryDate:
	EntryDate *types.Date `json:"EntryDate,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ExternalLinkDescription:
	ExternalLinkDescription *string `json:"ExternalLinkDescription,omitempty"`

	// ExternalLinkReference:
	ExternalLinkReference *string `json:"ExternalLinkReference,omitempty"`

	// GAccountAmountFC:
	GAccountAmountFC *float64 `json:"GAccountAmountFC,omitempty"`

	// InvoiceNumber:
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// IsExtraDuty:
	IsExtraDuty *bool `json:"IsExtraDuty,omitempty"`

	// Journal:
	Journal *string `json:"Journal,omitempty"`

	// JournalDescription:
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// OrderNumber:
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// PaymentReference:
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// ProcessNumber:
	ProcessNumber *int `json:"ProcessNumber,omitempty"`

	// Rate:
	Rate *float64 `json:"Rate,omitempty"`

	// ReportingPeriod:
	ReportingPeriod *int `json:"ReportingPeriod,omitempty"`

	// ReportingYear:
	ReportingYear *int `json:"ReportingYear,omitempty"`

	// Reversal:
	Reversal *bool `json:"Reversal,omitempty"`

	// SalesEntryLines:
	SalesEntryLines *json.RawMessage `json:"SalesEntryLines,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// StatusDescription:
	StatusDescription *string `json:"StatusDescription,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// TypeDescription:
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// VATAmountDC:
	VATAmountDC *float64 `json:"VATAmountDC,omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// WithholdingTaxAmountDC:
	WithholdingTaxAmountDC *float64 `json:"WithholdingTaxAmountDC,omitempty"`

	// WithholdingTaxBaseAmount:
	WithholdingTaxBaseAmount *float64 `json:"WithholdingTaxBaseAmount,omitempty"`

	// WithholdingTaxPercentage:
	WithholdingTaxPercentage *float64 `json:"WithholdingTaxPercentage,omitempty"`

	// YourRef:
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *SalesEntries) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *SalesEntriesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesentry/SalesEntries", method)
}

// List the SalesEntries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesEntriesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesEntries, error) {
	var entities []*SalesEntries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesEntries entitiy in the provided division.
func (s *SalesEntriesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SalesEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SalesEntries entity
func (s *SalesEntriesEndpoint) New() *SalesEntries {
	return &SalesEntries{}
}

// Create the SalesEntries entity in the provided division.
func (s *SalesEntriesEndpoint) Create(ctx context.Context, division int, entity *SalesEntries) (*SalesEntries, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries", division) // #nosec
	e := &SalesEntries{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the SalesEntries entity in the provided division.
func (s *SalesEntriesEndpoint) Update(ctx context.Context, division int, entity *SalesEntries) (*SalesEntries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &SalesEntries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the SalesEntries entity in the provided division.
func (s *SalesEntriesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesentry/SalesEntries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

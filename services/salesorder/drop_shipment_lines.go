// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesorder

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// DropShipmentLinesEndpoint is responsible for communicating with
// the DropShipmentLines endpoint of the SalesOrder service.
type DropShipmentLinesEndpoint service

// DropShipmentLines:
// Service: SalesOrder
// Entity: DropShipmentLines
// URL: /api/v1/{division}/salesorder/DropShipmentLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesOrderDropShipmentLines
type DropShipmentLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: The unique identifier of a stock transaction for a dropshipment line.
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumbers: Collection of batch numbers
	BatchNumbers *json.RawMessage `json:"BatchNumbers,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomerItemCode: Code the customer uses for this item
	CustomerItemCode *string `json:"CustomerItemCode,omitempty"`

	// DeliveryDate: Date of goods delivery
	DeliveryDate *types.Date `json:"DeliveryDate,omitempty"`

	// Description: Description of sales order dropshipment
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EntryID: The EntryID identifies the dropshipment. All the lines of a dropshipment have the same EntryID
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// Item: Reference to item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: Notes
	Notes *string `json:"Notes,omitempty"`

	// PurchaseOrderLineID: Reference to purchase order
	PurchaseOrderLineID *types.GUID `json:"PurchaseOrderLineID,omitempty"`

	// QuantityDelivered: Quantity delivered
	QuantityDelivered *float64 `json:"QuantityDelivered,omitempty"`

	// QuantityOrdered: Quantity ordered
	QuantityOrdered *float64 `json:"QuantityOrdered,omitempty"`

	// SalesOrderLineID: Reference to sales order
	SalesOrderLineID *types.GUID `json:"SalesOrderLineID,omitempty"`

	// SalesOrderLineNumber: Sales order line number
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Sales order number
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// SerialNumbers: Collection of serial numbers
	SerialNumbers *json.RawMessage `json:"SerialNumbers,omitempty"`

	// TrackingNumber: Reference to tracking number
	TrackingNumber *string `json:"TrackingNumber,omitempty"`

	// Unitcode: Code of item unit
	Unitcode *string `json:"Unitcode,omitempty"`
}

func (e *DropShipmentLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *DropShipmentLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesorder/DropShipmentLines", method)
}

// List the DropShipmentLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DropShipmentLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*DropShipmentLines, error) {
	var entities []*DropShipmentLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipmentLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the DropShipmentLines entitiy in the provided division.
func (s *DropShipmentLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*DropShipmentLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipmentLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &DropShipmentLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty DropShipmentLines entity
func (s *DropShipmentLinesEndpoint) New() *DropShipmentLines {
	return &DropShipmentLines{}
}

// Create the DropShipmentLines entity in the provided division.
func (s *DropShipmentLinesEndpoint) Create(ctx context.Context, division int, entity *DropShipmentLines) (*DropShipmentLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipmentLines", division) // #nosec
	e := &DropShipmentLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the DropShipmentLines entity in the provided division.
func (s *DropShipmentLinesEndpoint) Update(ctx context.Context, division int, entity *DropShipmentLines) (*DropShipmentLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipmentLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &DropShipmentLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

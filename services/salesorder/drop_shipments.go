// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package salesorder

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// DropShipmentsEndpoint is responsible for communicating with
// the DropShipments endpoint of the SalesOrder service.
type DropShipmentsEndpoint service

// DropShipments:
// Service: SalesOrder
// Entity: DropShipments
// URL: /api/v1/{division}/salesorder/DropShipments
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SalesOrderDropShipments
type DropShipments struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID: Primary key
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// DeliveryAccount: Reference to account for delivery
	DeliveryAccount *types.GUID `json:"DeliveryAccount,omitempty"`

	// DeliveryAccountCode: Delivery account code
	DeliveryAccountCode *string `json:"DeliveryAccountCode,omitempty"`

	// DeliveryAccountName: Delivery account name
	DeliveryAccountName *string `json:"DeliveryAccountName,omitempty"`

	// DeliveryAddress: Reference to shipping address
	DeliveryAddress *types.GUID `json:"DeliveryAddress,omitempty"`

	// DeliveryContact: Reference to contact for delivery
	DeliveryContact *types.GUID `json:"DeliveryContact,omitempty"`

	// DeliveryContactPersonFullName: Name of the contact person of the customer who will receive delivered goods
	DeliveryContactPersonFullName *string `json:"DeliveryContactPersonFullName,omitempty"`

	// DeliveryDate: Date of goods delivery
	DeliveryDate *types.Date `json:"DeliveryDate,omitempty"`

	// DeliveryNumber: Delivery number
	DeliveryNumber *int `json:"DeliveryNumber,omitempty"`

	// Description: Header description
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Document: Document that is manually linked to the sales order delivery
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: Document Subject
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DropShipmentLines: Collection of lines
	DropShipmentLines *json.RawMessage `json:"DropShipmentLines,omitempty"`

	// EntryNumber: Entry number
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Remarks: Remarks
	Remarks *string `json:"Remarks,omitempty"`

	// ShippingMethod: Reference to shipping method
	ShippingMethod *types.GUID `json:"ShippingMethod,omitempty"`

	// ShippingMethodCode: Code of shipping method
	ShippingMethodCode *string `json:"ShippingMethodCode,omitempty"`

	// ShippingMethodDescription: Description of shipping method
	ShippingMethodDescription *string `json:"ShippingMethodDescription,omitempty"`

	// TrackingNumber: Reference to header tracking number
	TrackingNumber *string `json:"TrackingNumber,omitempty"`
}

func (e *DropShipments) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *DropShipmentsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "salesorder/DropShipments", method)
}

// List the DropShipments entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DropShipmentsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*DropShipments, error) {
	var entities []*DropShipments
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipments", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the DropShipments entitiy in the provided division.
func (s *DropShipmentsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*DropShipments, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipments", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &DropShipments{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty DropShipments entity
func (s *DropShipmentsEndpoint) New() *DropShipments {
	return &DropShipments{}
}

// Create the DropShipments entity in the provided division.
func (s *DropShipmentsEndpoint) Create(ctx context.Context, division int, entity *DropShipments) (*DropShipments, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipments", division) // #nosec
	e := &DropShipments{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the DropShipments entity in the provided division.
func (s *DropShipmentsEndpoint) Update(ctx context.Context, division int, entity *DropShipments) (*DropShipments, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/salesorder/DropShipments", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &DropShipments{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

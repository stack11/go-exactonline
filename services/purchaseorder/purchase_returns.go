// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package purchaseorder

import (
	"context"
	"encoding/json"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PurchaseReturnsEndpoint is responsible for communicating with
// the PurchaseReturns endpoint of the PurchaseOrder service.
type PurchaseReturnsEndpoint service

// PurchaseReturns:
// Service: PurchaseOrder
// Entity: PurchaseReturns
// URL: /api/v1/{division}/purchaseorder/PurchaseReturns
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PurchaseOrderPurchaseReturns
type PurchaseReturns struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Creation Date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of the creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of the creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the return
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Document: Document linked to the return
	Document *types.GUID `json:"Document,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of the last modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of the last modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PurchaseReturnLines: The collection of lines that belong to the purchase return.
	PurchaseReturnLines *json.RawMessage `json:"PurchaseReturnLines,omitempty"`

	// Remarks: Remarks linked to the return
	Remarks *string `json:"Remarks,omitempty"`

	// ReturnDate: Date of the return
	ReturnDate *types.Date `json:"ReturnDate,omitempty"`

	// ReturnNumber: Return number
	ReturnNumber *int `json:"ReturnNumber,omitempty"`

	// Status: Status
	Status *int `json:"Status,omitempty"`

	// Supplier: Reference to supplier account
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierAddress: Reference for supplier address
	SupplierAddress *types.GUID `json:"SupplierAddress,omitempty"`

	// SupplierContact: Reference for contact of supplier
	SupplierContact *types.GUID `json:"SupplierContact,omitempty"`

	// SupplierContactFullName: Name of supplier
	SupplierContactFullName *string `json:"SupplierContactFullName,omitempty"`

	// TrackingNumber: Tracking number of the return
	TrackingNumber *string `json:"TrackingNumber,omitempty"`

	// Warehouse: Warehouse for the return
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`

	// YourRef: Reference number linked to the return
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *PurchaseReturns) GetPrimary() *types.GUID {
	return e.ID
}

func (s *PurchaseReturnsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "purchaseorder/PurchaseReturns", method)
}

// List the PurchaseReturns entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseReturnsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseReturns, error) {
	var entities []*PurchaseReturns
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseReturns", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseReturns entitiy in the provided division.
func (s *PurchaseReturnsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*PurchaseReturns, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseReturns", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseReturns{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty PurchaseReturns entity
func (s *PurchaseReturnsEndpoint) New() *PurchaseReturns {
	return &PurchaseReturns{}
}

// Create the PurchaseReturns entity in the provided division.
func (s *PurchaseReturnsEndpoint) Create(ctx context.Context, division int, entity *PurchaseReturns) (*PurchaseReturns, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseReturns", division) // #nosec
	e := &PurchaseReturns{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the PurchaseReturns entity in the provided division.
func (s *PurchaseReturnsEndpoint) Update(ctx context.Context, division int, entity *PurchaseReturns) (*PurchaseReturns, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/purchaseorder/PurchaseReturns", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &PurchaseReturns{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

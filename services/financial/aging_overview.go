// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"

	"github.com/stack11/go-exactonline/api"
)

// AgingOverviewEndpoint is responsible for communicating with
// the AgingOverview endpoint of the Financial service.
type AgingOverviewEndpoint service

// AgingOverview:
// Service: Financial
// Entity: AgingOverview
// URL: /api/v1/{division}/read/financial/AgingOverview
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadFinancialAgingOverview
type AgingOverview struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// AgeGroup: Primary key
	AgeGroup *int `json:"AgeGroup,omitempty"`

	// AgeGroupDescription: Description of AgeGroup
	AgeGroupDescription *string `json:"AgeGroupDescription,omitempty"`

	// AmountPayable: Amount payable
	AmountPayable *float64 `json:"AmountPayable,omitempty"`

	// AmountReceivable: Amount receivable
	AmountReceivable *float64 `json:"AmountReceivable,omitempty"`

	// CurrencyCode: Code of Currency
	CurrencyCode *string `json:"CurrencyCode,omitempty"`
}

func (e *AgingOverview) GetPrimary() *int {
	return e.AgeGroup
}

func (s *AgingOverviewEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/AgingOverview", method)
}

// List the AgingOverview entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *AgingOverviewEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*AgingOverview, error) {
	var entities []*AgingOverview
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/AgingOverview", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the AgingOverview entitiy in the provided division.
func (s *AgingOverviewEndpoint) Get(ctx context.Context, division int, id *int) (*AgingOverview, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/AgingOverview", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &AgingOverview{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

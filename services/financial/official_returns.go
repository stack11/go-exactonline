// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// OfficialReturnsEndpoint is responsible for communicating with
// the OfficialReturns endpoint of the Financial service.
type OfficialReturnsEndpoint service

// OfficialReturns:
// Service: Financial
// Entity: OfficialReturns
// URL: /api/v1/{division}/financial/OfficialReturns
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialOfficialReturns
type OfficialReturns struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Amount: Total liquidation amount of the official return
	Amount *float64 `json:"Amount,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: CreatorFullName
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the official return
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Document: Document linked to the official return.
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentSubject: DocumentSubject
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// Frequency: Frequency Monthly = 10,	TwoMonthly = 20, Quarterly = 30, Yearly = 40,FinancialYearQuarter = 100
	Frequency *int `json:"Frequency,omitempty"`

	// IsCorrection: IsCorrection
	IsCorrection *byte `json:"IsCorrection,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Period: Financial period (for annual returns = 0)
	Period *int `json:"Period,omitempty"`

	// PresentationData: Registration data of the presenting proof document, JSON serialized dictionary //  // Spanish legislation Keys: // registrationEntryNumberRegistration entry number // safeCodeVerificationTax authorities CSV // vatPresenterVAT number of the presenter // surnameNameCompanyNameName of the presenter // capacityOfCOLABORADOR // receiptNumberReceipt number
	PresentationData *string `json:"PresentationData,omitempty"`

	// PresentationDate: Presentation date of the official return to the tax authorities
	PresentationDate *types.Date `json:"PresentationDate,omitempty"`

	// PresentationFile: For performance reasons presentation attachment is Write-Only.
	PresentationFile *[]byte `json:"PresentationFile,omitempty"`

	// PresentationFileName: File name of presentation attachment.
	PresentationFileName *string `json:"PresentationFileName,omitempty"`

	// Reference: Reference of the official return
	Reference *string `json:"Reference,omitempty"`

	// Source: Source of the official return : 1 - EOL, 2 - RestAPI
	Source *int `json:"Source,omitempty"`

	// Status: Status of the official return
	Status *int `json:"Status,omitempty"`

	// Type: Type of the official return
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Official return type description
	TypeDescription *string `json:"TypeDescription,omitempty"`

	// Year: Financial year of the official return
	Year *int `json:"Year,omitempty"`
}

func (e *OfficialReturns) GetPrimary() *types.GUID {
	return e.ID
}

func (s *OfficialReturnsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/OfficialReturns", method)
}

// List the OfficialReturns entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *OfficialReturnsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*OfficialReturns, error) {
	var entities []*OfficialReturns
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/OfficialReturns", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the OfficialReturns entitiy in the provided division.
func (s *OfficialReturnsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*OfficialReturns, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/OfficialReturns", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &OfficialReturns{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty OfficialReturns entity
func (s *OfficialReturnsEndpoint) New() *OfficialReturns {
	return &OfficialReturns{}
}

// Create the OfficialReturns entity in the provided division.
func (s *OfficialReturnsEndpoint) Create(ctx context.Context, division int, entity *OfficialReturns) (*OfficialReturns, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/OfficialReturns", division) // #nosec
	e := &OfficialReturns{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

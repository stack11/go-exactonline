// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ExchangeRatesEndpoint is responsible for communicating with
// the ExchangeRates endpoint of the Financial service.
type ExchangeRatesEndpoint service

// ExchangeRates:
// Service: Financial
// Entity: ExchangeRates
// URL: /api/v1/{division}/financial/ExchangeRates
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=FinancialExchangeRates
type ExchangeRates struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Rate: The exchange rate is stored as 1 TARGET CURRENCY = x SOURCE CURRENCY
	Rate *float64 `json:"Rate,omitempty"`

	// SourceCurrency: The foreign currency
	SourceCurrency *string `json:"SourceCurrency,omitempty"`

	// SourceCurrencyDescription: Description of the foreign currency
	SourceCurrencyDescription *string `json:"SourceCurrencyDescription,omitempty"`

	// StartDate: The date as of which the rate is valid. The rate is valid until a next rate is defined
	StartDate *types.Date `json:"StartDate,omitempty"`

	// TargetCurrency: The default currency of the division
	TargetCurrency *string `json:"TargetCurrency,omitempty"`

	// TargetCurrencyDescription: Description of the default currency
	TargetCurrencyDescription *string `json:"TargetCurrencyDescription,omitempty"`
}

func (e *ExchangeRates) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ExchangeRatesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/ExchangeRates", method)
}

// List the ExchangeRates entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ExchangeRatesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ExchangeRates, error) {
	var entities []*ExchangeRates
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/ExchangeRates", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ExchangeRates entitiy in the provided division.
func (s *ExchangeRatesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ExchangeRates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/ExchangeRates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ExchangeRates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ExchangeRates entity
func (s *ExchangeRatesEndpoint) New() *ExchangeRates {
	return &ExchangeRates{}
}

// Create the ExchangeRates entity in the provided division.
func (s *ExchangeRatesEndpoint) Create(ctx context.Context, division int, entity *ExchangeRates) (*ExchangeRates, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/ExchangeRates", division) // #nosec
	e := &ExchangeRates{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the ExchangeRates entity in the provided division.
func (s *ExchangeRatesEndpoint) Update(ctx context.Context, division int, entity *ExchangeRates) (*ExchangeRates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/ExchangeRates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ExchangeRates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the ExchangeRates entity in the provided division.
func (s *ExchangeRatesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/financial/ExchangeRates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

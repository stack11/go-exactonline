// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package financial

import (
	"context"

	"github.com/stack11/go-exactonline/api"
)

// OutstandingInvoicesOverviewEndpoint is responsible for communicating with
// the OutstandingInvoicesOverview endpoint of the Financial service.
type OutstandingInvoicesOverviewEndpoint service

// OutstandingInvoicesOverview:
// Service: Financial
// Entity: OutstandingInvoicesOverview
// URL: /api/v1/{division}/read/financial/OutstandingInvoicesOverview
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadFinancialOutstandingInvoicesOverview
type OutstandingInvoicesOverview struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// CurrencyCode: Primary key
	CurrencyCode *string `json:"CurrencyCode,omitempty"`

	// OutstandingPayableInvoiceAmount: Total invoice amount to be paid
	OutstandingPayableInvoiceAmount *float64 `json:"OutstandingPayableInvoiceAmount,omitempty"`

	// OutstandingPayableInvoiceCount: Number of invoices to be paid
	OutstandingPayableInvoiceCount *float64 `json:"OutstandingPayableInvoiceCount,omitempty"`

	// OutstandingReceivableInvoiceAmount: Total invoice amount to be received
	OutstandingReceivableInvoiceAmount *float64 `json:"OutstandingReceivableInvoiceAmount,omitempty"`

	// OutstandingReceivableInvoiceCount: Number of invoices to be received
	OutstandingReceivableInvoiceCount *float64 `json:"OutstandingReceivableInvoiceCount,omitempty"`

	// OverduePayableInvoiceAmount: Total payable invoice amount that is overdue
	OverduePayableInvoiceAmount *float64 `json:"OverduePayableInvoiceAmount,omitempty"`

	// OverduePayableInvoiceCount: Number of payable invoices that are overdue
	OverduePayableInvoiceCount *float64 `json:"OverduePayableInvoiceCount,omitempty"`

	// OverdueReceivableInvoiceAmount: Total receivable invoice amount that is overdue
	OverdueReceivableInvoiceAmount *float64 `json:"OverdueReceivableInvoiceAmount,omitempty"`

	// OverdueReceivableInvoiceCount: Number of receivable invoices that are overdue
	OverdueReceivableInvoiceCount *float64 `json:"OverdueReceivableInvoiceCount,omitempty"`
}

func (e *OutstandingInvoicesOverview) GetPrimary() *string {
	return e.CurrencyCode
}

func (s *OutstandingInvoicesOverviewEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "financial/OutstandingInvoicesOverview", method)
}

// List the OutstandingInvoicesOverview entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *OutstandingInvoicesOverviewEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*OutstandingInvoicesOverview, error) {
	var entities []*OutstandingInvoicesOverview
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/OutstandingInvoicesOverview", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the OutstandingInvoicesOverview entitiy in the provided division.
func (s *OutstandingInvoicesOverviewEndpoint) Get(ctx context.Context, division int, id *string) (*OutstandingInvoicesOverview, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/financial/OutstandingInvoicesOverview", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &OutstandingInvoicesOverview{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// RecentTimeTransactionsEndpoint is responsible for communicating with
// the RecentTimeTransactions endpoint of the Manufacturing service.
type RecentTimeTransactionsEndpoint service

// RecentTimeTransactions:
// Service: Manufacturing
// Entity: RecentTimeTransactions
// URL: /api/v1/{division}/read/manufacturing/RecentTimeTransactions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadManufacturingRecentTimeTransactions
type RecentTimeTransactions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// CustomerCode: Customer code
	CustomerCode *string `json:"CustomerCode,omitempty"`

	// CustomerCount: Count of customers
	CustomerCount *int `json:"CustomerCount,omitempty"`

	// CustomerName: Customer name
	CustomerName *string `json:"CustomerName,omitempty"`

	// DataType: Type of data returned by query - for internal use
	DataType *int `json:"DataType,omitempty"`

	// Date: Date of time entry
	Date *types.Date `json:"Date,omitempty"`

	// Employee: ID of employee
	Employee *types.GUID `json:"Employee,omitempty"`

	// EndTime: Time that operation was stopped
	EndTime *types.Date `json:"EndTime,omitempty"`

	// HourStatus: Hour Status of the time transaction: Rejected = 2, Submitted = 10, Approved = 20
	HourStatus *int `json:"HourStatus,omitempty"`

	// IsFractionAllowedItem: Is fraction allowed item
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// IsOperationFinished: Is the operation finished?
	IsOperationFinished *byte `json:"IsOperationFinished,omitempty"`

	// Item: Shop order make item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Make item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemPictureUrl: Url to retrieve the item
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// ItemUnit: Make item unit
	ItemUnit *string `json:"ItemUnit,omitempty"`

	// LaborHours: Adjustable labor hours
	LaborHours *float64 `json:"LaborHours,omitempty"`

	// MachineHours: Adjustable machine hours
	MachineHours *float64 `json:"MachineHours,omitempty"`

	// Modified: Modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Notes: Notes - viewable in data collection
	Notes *string `json:"Notes,omitempty"`

	// Operation: Routing step operation
	Operation *types.GUID `json:"Operation,omitempty"`

	// OperationCode: Routing step operation code
	OperationCode *string `json:"OperationCode,omitempty"`

	// PercentComplete: Percentage of operation completed within time period
	PercentComplete *float64 `json:"PercentComplete,omitempty"`

	// ProducedQuantity: Quantity of make item produced within time period
	ProducedQuantity *float64 `json:"ProducedQuantity,omitempty"`

	// Project: Project ID of the shop order
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Project code of the shop order
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Project description of the shop order
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// SalesOrderCount: Count of Sales order
	SalesOrderCount *int `json:"SalesOrderCount,omitempty"`

	// SalesOrderLineNumber: Sales order line number
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber: Sales order number
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// ShopOrder: Shop order
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderDescription: Shop order description
	ShopOrderDescription *string `json:"ShopOrderDescription,omitempty"`

	// ShopOrderNumber: Shop order number
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// ShopOrderPlannedQuantity: Shop order planned quantity
	ShopOrderPlannedQuantity *float64 `json:"ShopOrderPlannedQuantity,omitempty"`

	// ShopOrderRoutingStepPlan: Shop order routing step where work occurred
	ShopOrderRoutingStepPlan *types.GUID `json:"ShopOrderRoutingStepPlan,omitempty"`

	// ShopOrderRoutingStepPlanAttendedPercentage: Percentage of time attended on the routing step plan
	ShopOrderRoutingStepPlanAttendedPercentage *float64 `json:"ShopOrderRoutingStepPlanAttendedPercentage,omitempty"`

	// ShopOrderRoutingStepPlanDescription: Description of the shop order routing step where work occurred
	ShopOrderRoutingStepPlanDescription *string `json:"ShopOrderRoutingStepPlanDescription,omitempty"`

	// StartTime: Time that operation was started
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Status of the time transaction
	Status *int `json:"Status,omitempty"`

	// Type: Type of the time transaction: Setup = 10, Run = 20
	Type *int `json:"Type,omitempty"`

	// Warehouse: ID of warehouse where shop order is finished
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// Workcenter: Work center where work occurred
	Workcenter *types.GUID `json:"Workcenter,omitempty"`

	// WorkcenterCode: Work center code
	WorkcenterCode *string `json:"WorkcenterCode,omitempty"`
}

func (e *RecentTimeTransactions) GetPrimary() *types.GUID {
	return e.ID
}

func (s *RecentTimeTransactionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/RecentTimeTransactions", method)
}

// List the RecentTimeTransactions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *RecentTimeTransactionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*RecentTimeTransactions, error) {
	var entities []*RecentTimeTransactions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/RecentTimeTransactions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the RecentTimeTransactions entitiy in the provided division.
func (s *RecentTimeTransactionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*RecentTimeTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/manufacturing/RecentTimeTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &RecentTimeTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/stack11/go-exactonline/api"
)

// ManufacturingSettingsEndpoint is responsible for communicating with
// the ManufacturingSettings endpoint of the Manufacturing service.
type ManufacturingSettingsEndpoint service

// ManufacturingSettings:
// Service: Manufacturing
// Entity: ManufacturingSettings
// URL: /api/v1/{division}/manufacturing/ManufacturingSettings
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingManufacturingSettings
type ManufacturingSettings struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Division: This division.
	Division *int `json:"Division,omitempty"`

	// InventoryMainMethod: What is the division&#39;s main inventory method? Standard=3,Average=4
	InventoryMainMethod *int `json:"InventoryMainMethod,omitempty"`

	// InventorySubMethod: What is the division&#39;s sub inventory method? Perpetual=1,NonPerpetual=2,AngloSaxon=3
	InventorySubMethod *int `json:"InventorySubMethod,omitempty"`

	// NegativeStockIsAllowed: Does the current division allow negative stock?
	NegativeStockIsAllowed *byte `json:"NegativeStockIsAllowed,omitempty"`

	// SerialNumbersAreMandatory: Are serial numbers mandatory in this division?
	SerialNumbersAreMandatory *byte `json:"SerialNumbersAreMandatory,omitempty"`

	// ShowBackflushMaterials: Should ShopOrderMaterialPlans with Backflush=True be shown within Smart Shop Floor?
	ShowBackflushMaterials *byte `json:"ShowBackflushMaterials,omitempty"`

	// ShowSubOrderMaterials: Should ShopOrderMaterialPlans linked to a SubOrder be shown within Smart Shop Floor?
	ShowSubOrderMaterials *byte `json:"ShowSubOrderMaterials,omitempty"`
}

func (e *ManufacturingSettings) GetPrimary() *int {
	return e.Division
}

func (s *ManufacturingSettingsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ManufacturingSettings", method)
}

// List the ManufacturingSettings entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ManufacturingSettingsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ManufacturingSettings, error) {
	var entities []*ManufacturingSettings
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ManufacturingSettings", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ManufacturingSettings entitiy in the provided division.
func (s *ManufacturingSettingsEndpoint) Get(ctx context.Context, division int, id *int) (*ManufacturingSettings, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ManufacturingSettings", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ManufacturingSettings{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

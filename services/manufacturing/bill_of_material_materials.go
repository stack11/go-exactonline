// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// BillOfMaterialMaterialsEndpoint is responsible for communicating with
// the BillOfMaterialMaterials endpoint of the Manufacturing service.
type BillOfMaterialMaterialsEndpoint service

// BillOfMaterialMaterials:
// Service: Manufacturing
// Entity: BillOfMaterialMaterials
// URL: /api/v1/{division}/manufacturing/BillOfMaterialMaterials
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingBillOfMaterialMaterials
type BillOfMaterialMaterials struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// AverageCost: Item average cost available when average cost method is used
	AverageCost *float64 `json:"AverageCost,omitempty"`

	// Backflush: Indicates if this is a backflush item
	Backflush *byte `json:"Backflush,omitempty"`

	// CalculatorType: Calculator type
	CalculatorType *int `json:"CalculatorType,omitempty"`

	// CostBatch: Cost batch
	CostBatch *float64 `json:"CostBatch,omitempty"`

	// CostCenter: Cost center
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Cost center description
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Cost unit
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Cost unit description
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the material
	Description *string `json:"Description,omitempty"`

	// DetailDrawing: Detail drawing reference
	DetailDrawing *string `json:"DetailDrawing,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// ItemVersion: Bill of material version
	ItemVersion *types.GUID `json:"ItemVersion,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// NetWeight: Net weight
	NetWeight *float64 `json:"NetWeight,omitempty"`

	// NetWeightUnit: Net weight unit of measure
	NetWeightUnit *string `json:"NetWeightUnit,omitempty"`

	// Notes: Notes
	Notes *string `json:"Notes,omitempty"`

	// PartItem: Key of part item
	PartItem *types.GUID `json:"PartItem,omitempty"`

	// PartItemCode: Part item code
	PartItemCode *string `json:"PartItemCode,omitempty"`

	// PartItemCostPriceStandard: Item standard cost available when standard cost method is used
	PartItemCostPriceStandard *float64 `json:"PartItemCostPriceStandard,omitempty"`

	// PartItemDescription: Part item description
	PartItemDescription *string `json:"PartItemDescription,omitempty"`

	// Quantity: Quantity of the material that ends up in the produced item
	Quantity *float64 `json:"Quantity,omitempty"`

	// QuantityBatch: Quantity of the material needed to produce the batch including the waste
	QuantityBatch *float64 `json:"QuantityBatch,omitempty"`

	// Syscreated: Creation date
	Syscreated *types.Date `json:"syscreated,omitempty"`

	// Syscreator: User ID of creator
	Syscreator *types.GUID `json:"syscreator,omitempty"`

	// Sysmodified: Modified date
	Sysmodified *types.Date `json:"sysmodified,omitempty"`

	// Sysmodifier: User ID of modifier
	Sysmodifier *types.GUID `json:"sysmodifier,omitempty"`

	// Type: Material type 1 indicates material, 2 indicates byproduct
	Type *int `json:"Type,omitempty"`

	// WastePercentage: Waste percentage must be null or integer from 1 to 9999 (only available in Manufacturing Premium)
	WastePercentage *float64 `json:"WastePercentage,omitempty"`
}

func (e *BillOfMaterialMaterials) GetPrimary() *types.GUID {
	return e.ID
}

func (s *BillOfMaterialMaterialsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/BillOfMaterialMaterials", method)
}

// List the BillOfMaterialMaterials entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *BillOfMaterialMaterialsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*BillOfMaterialMaterials, error) {
	var entities []*BillOfMaterialMaterials
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialMaterials", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the BillOfMaterialMaterials entitiy in the provided division.
func (s *BillOfMaterialMaterialsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*BillOfMaterialMaterials, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &BillOfMaterialMaterials{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty BillOfMaterialMaterials entity
func (s *BillOfMaterialMaterialsEndpoint) New() *BillOfMaterialMaterials {
	return &BillOfMaterialMaterials{}
}

// Create the BillOfMaterialMaterials entity in the provided division.
func (s *BillOfMaterialMaterialsEndpoint) Create(ctx context.Context, division int, entity *BillOfMaterialMaterials) (*BillOfMaterialMaterials, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialMaterials", division) // #nosec
	e := &BillOfMaterialMaterials{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the BillOfMaterialMaterials entity in the provided division.
func (s *BillOfMaterialMaterialsEndpoint) Update(ctx context.Context, division int, entity *BillOfMaterialMaterials) (*BillOfMaterialMaterials, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &BillOfMaterialMaterials{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the BillOfMaterialMaterials entity in the provided division.
func (s *BillOfMaterialMaterialsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/BillOfMaterialMaterials", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package manufacturing

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ByProductReceiptsEndpoint is responsible for communicating with
// the ByProductReceipts endpoint of the Manufacturing service.
type ByProductReceiptsEndpoint service

// ByProductReceipts:
// Service: Manufacturing
// Entity: ByProductReceipts
// URL: /api/v1/{division}/manufacturing/ByProductReceipts
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ManufacturingByProductReceipts
type ByProductReceipts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// StockTransactionId: ID of stock transaction related to this by-product finish
	StockTransactionId *types.GUID `json:"StockTransactionId,omitempty"`

	// CreatedBy: ID of creating user
	CreatedBy *types.GUID `json:"CreatedBy,omitempty"`

	// CreatedByFullName: Name of the creating user
	CreatedByFullName *string `json:"CreatedByFullName,omitempty"`

	// CreatedDate: Date this by-product finish was created
	CreatedDate *types.Date `json:"CreatedDate,omitempty"`

	// DraftStockTransactionID: Serial or batch numbers are reserved prior to a POST to ByProductReceipts. This DraftStockTransactionID represents the group of serial or batch numbers to be used in this transaction.
	DraftStockTransactionID *types.GUID `json:"DraftStockTransactionID,omitempty"`

	// HasReversibleQuantity: Indicates if this ByProductReceipt has a quantity eligible to be reversed via ByProductReversals
	HasReversibleQuantity *bool `json:"HasReversibleQuantity,omitempty"`

	// IsBackflush: Boolean indicating if this by-product finish was the result of shop order backflushing
	IsBackflush *bool `json:"IsBackflush,omitempty"`

	// IsBatch: Does the ByProductReceipt&#39;s item use batch numbers
	IsBatch *byte `json:"IsBatch,omitempty"`

	// IsFractionAllowedItem: Indicates if fractions (for example 0.35) are allowed for quantities of the ByProductReceipt&#39;s item
	IsFractionAllowedItem *byte `json:"IsFractionAllowedItem,omitempty"`

	// IsSerial: Does the ByProductReceipt&#39;s item use serial numbers
	IsSerial *byte `json:"IsSerial,omitempty"`

	// Item: ID of by-product item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of by-product item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of by-product item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemPictureUrl: Picture url of by-product item
	ItemPictureUrl *string `json:"ItemPictureUrl,omitempty"`

	// Quantity: Quantity of this by-product finish
	Quantity *float64 `json:"Quantity,omitempty"`

	// ShopOrder: ID of shop order, which produced the by-product
	ShopOrder *types.GUID `json:"ShopOrder,omitempty"`

	// ShopOrderMaterialPlan: ID of the shop order material plan for this by-product
	ShopOrderMaterialPlan *types.GUID `json:"ShopOrderMaterialPlan,omitempty"`

	// ShopOrderNumber: Number of shop order, which produced the by-product
	ShopOrderNumber *int `json:"ShopOrderNumber,omitempty"`

	// StorageLocation: ID of storage location finished to
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Code of storage location finished to
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Description of storage location finished to
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// TransactionDate: Effective date of this by-product finish
	TransactionDate *types.Date `json:"TransactionDate,omitempty"`

	// Unit: Unit of measurement abbreviation of by-product item
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Unit of measurement of by-product item
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// Warehouse: ID of warehouse finished to
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse finished to
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse finished to
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *ByProductReceipts) GetPrimary() *types.GUID {
	return e.StockTransactionId
}

func (s *ByProductReceiptsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "manufacturing/ByProductReceipts", method)
}

// List the ByProductReceipts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ByProductReceiptsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ByProductReceipts, error) {
	var entities []*ByProductReceipts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ByProductReceipts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ByProductReceipts entitiy in the provided division.
func (s *ByProductReceiptsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ByProductReceipts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ByProductReceipts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ByProductReceipts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ByProductReceipts entity
func (s *ByProductReceiptsEndpoint) New() *ByProductReceipts {
	return &ByProductReceipts{}
}

// Create the ByProductReceipts entity in the provided division.
func (s *ByProductReceiptsEndpoint) Create(ctx context.Context, division int, entity *ByProductReceipts) (*ByProductReceipts, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/manufacturing/ByProductReceipts", division) // #nosec
	e := &ByProductReceipts{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

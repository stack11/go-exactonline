// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// StockBatchNumbersEndpoint is responsible for communicating with
// the StockBatchNumbers endpoint of the Inventory service.
type StockBatchNumbersEndpoint service

// StockBatchNumbers:
// Service: Inventory
// Entity: StockBatchNumbers
// URL: /api/v1/{division}/inventory/StockBatchNumbers
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryStockBatchNumbers
type StockBatchNumbers struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumber: Human readable batch number
	BatchNumber *string `json:"BatchNumber,omitempty"`

	// BatchNumberID: Batch number ID
	BatchNumberID *types.GUID `json:"BatchNumberID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// DraftStockTransactionID: ID representing a group of batch numbers being reserved for use in a subsequent stock transaction
	DraftStockTransactionID *types.GUID `json:"DraftStockTransactionID,omitempty"`

	// EndDate: End date of effective period for batch number
	EndDate *types.Date `json:"EndDate,omitempty"`

	// IsBlocked: Boolean value indicating whether or not the batch number is blocked
	IsBlocked *byte `json:"IsBlocked,omitempty"`

	// IsDraft: Boolean value indicating if this batch number is being reserved
	IsDraft *byte `json:"IsDraft,omitempty"`

	// Item: Item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PickOrderLine: ID of pick order entry in which this batch number was used
	PickOrderLine *types.GUID `json:"PickOrderLine,omitempty"`

	// Quantity: Quantity of this batch number entering or leaving inventory
	Quantity *float64 `json:"Quantity,omitempty"`

	// Remarks: Remarks
	Remarks *string `json:"Remarks,omitempty"`

	// SalesReturnLine: ID of sales return entry in which this batch number was used
	SalesReturnLine *types.GUID `json:"SalesReturnLine,omitempty"`

	// StockCountLine: ID of stock count entry
	StockCountLine *types.GUID `json:"StockCountLine,omitempty"`

	// StockTransactionID: ID of the stock transaction in which this batch number was used
	StockTransactionID *types.GUID `json:"StockTransactionID,omitempty"`

	// StockTransactionType: Type of stock transaction associated with this batch number.Available values:10 = Opening balance120 = Goods delivery121 = Sales return122 = Stock out (Drop shipment)123 = Stock in (Drop shipment return)124 = Warehouse transfer delivery125 = Location Transfer Delivery130 = Goods receipt131 = Purchase return132 = Stock in (Drop shipment)133 = Stock out (Drop shipment return)134 = Warehouse transfer receipt135 = Location Transfer Receipt140 = Shop order stock receipt141 = Shop order stock reversal147 = Shop order by-product receipt148 = Shop order by-product reversal150 = Requirement issue151 = Requirement reversal155 = Subcontract issue156 = Subcontract return160 = Receipt (Assembly)161 = Return receipt (Disassembly)165 = Issue (Assembly)166 = Return issue (Disassembly)180 = Stock revaluation181 = Financial revaluation195 = Stock count196 = Adjust stock - out197 = Adjust stock - in200 = Trade-in
	StockTransactionType *int `json:"StockTransactionType,omitempty"`

	// StorageLocation: Storage location which this batch number is entering or leaving
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Code of the storage location which this batch number is entering or leaving
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Description of the storage location which this batch number is entering or leaving
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// Warehouse: Warehouse which this batch number is entering or leaving
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of the warehouse which this batch number is entering or leaving
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of the warehouse which this batch number is entering or leaving
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *StockBatchNumbers) GetPrimary() *types.GUID {
	return e.ID
}

func (s *StockBatchNumbersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/StockBatchNumbers", method)
}

// List the StockBatchNumbers entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *StockBatchNumbersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*StockBatchNumbers, error) {
	var entities []*StockBatchNumbers
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockBatchNumbers", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the StockBatchNumbers entitiy in the provided division.
func (s *StockBatchNumbersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*StockBatchNumbers, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockBatchNumbers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &StockBatchNumbers{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty StockBatchNumbers entity
func (s *StockBatchNumbersEndpoint) New() *StockBatchNumbers {
	return &StockBatchNumbers{}
}

// Create the StockBatchNumbers entity in the provided division.
func (s *StockBatchNumbersEndpoint) Create(ctx context.Context, division int, entity *StockBatchNumbers) (*StockBatchNumbers, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockBatchNumbers", division) // #nosec
	e := &StockBatchNumbers{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the StockBatchNumbers entity in the provided division.
func (s *StockBatchNumbersEndpoint) Update(ctx context.Context, division int, entity *StockBatchNumbers) (*StockBatchNumbers, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockBatchNumbers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &StockBatchNumbers{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the StockBatchNumbers entity in the provided division.
func (s *StockBatchNumbersEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StockBatchNumbers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// WarehouseTransferLinesEndpoint is responsible for communicating with
// the WarehouseTransferLines endpoint of the Inventory service.
type WarehouseTransferLinesEndpoint service

// WarehouseTransferLines:
// Service: Inventory
// Entity: WarehouseTransferLines
// URL: /api/v1/{division}/inventory/WarehouseTransferLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryWarehouseTransferLines
type WarehouseTransferLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// BatchNumbers: The collection of batch numbers that belong to the items included in this warehouse transfer
	BatchNumbers *json.RawMessage `json:"BatchNumbers,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Item: Item ID
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// LineNumber: Line number
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PickedBy: Picked by
	PickedBy *types.GUID `json:"PickedBy,omitempty"`

	// Quantity: Quantity of transfer
	Quantity *float64 `json:"Quantity,omitempty"`

	// SerialNumbers: The collection of serial numbers that belong to the items included in this warehouse transfer
	SerialNumbers *json.RawMessage `json:"SerialNumbers,omitempty"`

	// StorageLocationFrom: ID of storage location to transfer item from (Professional and Premium Only)
	StorageLocationFrom *types.GUID `json:"StorageLocationFrom,omitempty"`

	// StorageLocationFromCode: Code of storage location to transfer item from
	StorageLocationFromCode *string `json:"StorageLocationFromCode,omitempty"`

	// StorageLocationFromDescription: Description of storage location to transfer item from
	StorageLocationFromDescription *string `json:"StorageLocationFromDescription,omitempty"`

	// StorageLocationFromLocationSequence: Location sequence of storage location to transfer item from (Premium Only)
	StorageLocationFromLocationSequence *int `json:"StorageLocationFromLocationSequence,omitempty"`

	// StorageLocationTo: ID of storage location to transfer item to (Professional and Premium Only)
	StorageLocationTo *types.GUID `json:"StorageLocationTo,omitempty"`

	// StorageLocationToCode: Code of storage location to transfer item to
	StorageLocationToCode *string `json:"StorageLocationToCode,omitempty"`

	// StorageLocationToDescription: Description of storage location to transfer item to
	StorageLocationToDescription *string `json:"StorageLocationToDescription,omitempty"`

	// StorageLocationToLocationSequence: Location sequence of storage location to transfer item to (Premium Only)
	StorageLocationToLocationSequence *int `json:"StorageLocationToLocationSequence,omitempty"`

	// TransferID: Entry number of the stock transaction
	TransferID *types.GUID `json:"TransferID,omitempty"`

	// TransferredBy: Transferred by
	TransferredBy *types.GUID `json:"TransferredBy,omitempty"`

	// UnitCode: The standard unit code of this item
	UnitCode *string `json:"UnitCode,omitempty"`

	// UnitDescription: Description of item&#39;s unit
	UnitDescription *string `json:"UnitDescription,omitempty"`
}

func (e *WarehouseTransferLines) GetPrimary() *types.GUID {
	return e.ID
}

func (s *WarehouseTransferLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/WarehouseTransferLines", method)
}

// List the WarehouseTransferLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *WarehouseTransferLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*WarehouseTransferLines, error) {
	var entities []*WarehouseTransferLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/WarehouseTransferLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the WarehouseTransferLines entitiy in the provided division.
func (s *WarehouseTransferLinesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*WarehouseTransferLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/WarehouseTransferLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &WarehouseTransferLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty WarehouseTransferLines entity
func (s *WarehouseTransferLinesEndpoint) New() *WarehouseTransferLines {
	return &WarehouseTransferLines{}
}

// Create the WarehouseTransferLines entity in the provided division.
func (s *WarehouseTransferLinesEndpoint) Create(ctx context.Context, division int, entity *WarehouseTransferLines) (*WarehouseTransferLines, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/WarehouseTransferLines", division) // #nosec
	e := &WarehouseTransferLines{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the WarehouseTransferLines entity in the provided division.
func (s *WarehouseTransferLinesEndpoint) Update(ctx context.Context, division int, entity *WarehouseTransferLines) (*WarehouseTransferLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/WarehouseTransferLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &WarehouseTransferLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the WarehouseTransferLines entity in the provided division.
func (s *WarehouseTransferLinesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/WarehouseTransferLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package inventory

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// StorageLocationsEndpoint is responsible for communicating with
// the StorageLocations endpoint of the Inventory service.
type StorageLocationsEndpoint service

// StorageLocations:
// Service: Inventory
// Entity: StorageLocations
// URL: /api/v1/{division}/inventory/StorageLocations
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=InventoryStorageLocations
type StorageLocations struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: A guid that is the unique identifier of the storage location
	ID *types.GUID `json:"ID,omitempty"`

	// Code: Code of the storage location
	Code *string `json:"Code,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of the storage location
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Main: Indicates if this is the main storage location. There&#39;s always exactly one main storage location per warehouse
	Main *byte `json:"Main,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PickSequence: Sequence for locations
	PickSequence *int `json:"PickSequence,omitempty"`

	// Warehouse: Warehouse ID
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Warehouse Code
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *StorageLocations) GetPrimary() *types.GUID {
	return e.ID
}

func (s *StorageLocationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "inventory/StorageLocations", method)
}

// List the StorageLocations entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *StorageLocationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*StorageLocations, error) {
	var entities []*StorageLocations
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StorageLocations", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the StorageLocations entitiy in the provided division.
func (s *StorageLocationsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*StorageLocations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/inventory/StorageLocations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &StorageLocations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

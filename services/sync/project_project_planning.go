// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectProjectPlanningEndpoint is responsible for communicating with
// the ProjectProjectPlanning endpoint of the Sync service.
type ProjectProjectPlanningEndpoint service

// ProjectProjectPlanning:
// Service: Sync
// Entity: ProjectProjectPlanning
// URL: /api/v1/{division}/sync/Project/ProjectPlanning
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncProjectProjectPlanning
type ProjectProjectPlanning struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Account:
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode:
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// BGTStatus:
	BGTStatus *int `json:"BGTStatus,omitempty"`

	// CommunicationErrorStatus:
	CommunicationErrorStatus *int `json:"CommunicationErrorStatus,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField:
	CustomField *string `json:"CustomField,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Employee:
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeCode:
	EmployeeCode *string `json:"EmployeeCode,omitempty"`

	// EmployeeHID:
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate:
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Hours:
	Hours *float64 `json:"Hours,omitempty"`

	// HourType:
	HourType *types.GUID `json:"HourType,omitempty"`

	// HourTypeCode:
	HourTypeCode *string `json:"HourTypeCode,omitempty"`

	// HourTypeDescription:
	HourTypeDescription *string `json:"HourTypeDescription,omitempty"`

	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// IsBrokenRecurrence:
	IsBrokenRecurrence *bool `json:"IsBrokenRecurrence,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// OverAllocate:
	OverAllocate *bool `json:"OverAllocate,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode:
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectPlanningRecurring:
	ProjectPlanningRecurring *types.GUID `json:"ProjectPlanningRecurring,omitempty"`

	// ProjectWBS:
	ProjectWBS *types.GUID `json:"ProjectWBS,omitempty"`

	// ProjectWBSDescription:
	ProjectWBSDescription *string `json:"ProjectWBSDescription,omitempty"`

	// StartDate:
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`
}

func (e *ProjectProjectPlanning) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *ProjectProjectPlanningEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Project/ProjectPlanning", method)
}

// List the ProjectProjectPlanning entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectPlanningEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectProjectPlanning, error) {
	var entities []*ProjectProjectPlanning
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/ProjectPlanning", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectProjectPlanning entitiy in the provided division.
func (s *ProjectProjectPlanningEndpoint) Get(ctx context.Context, division int, id *int64) (*ProjectProjectPlanning, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/ProjectPlanning", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectProjectPlanning{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

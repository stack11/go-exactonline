// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PayrollEmploymentContractsEndpoint is responsible for communicating with
// the PayrollEmploymentContracts endpoint of the Sync service.
type PayrollEmploymentContractsEndpoint service

// PayrollEmploymentContracts:
// Service: Sync
// Entity: PayrollEmploymentContracts
// URL: /api/v1/{division}/sync/Payroll/EmploymentContracts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncPayrollEmploymentContracts
type PayrollEmploymentContracts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// ContractFlexPhase: Flexible employment contract phase
	ContractFlexPhase *int `json:"ContractFlexPhase,omitempty"`

	// ContractFlexPhaseDescription: Flexible employment contract phase description.
	ContractFlexPhaseDescription *string `json:"ContractFlexPhaseDescription,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Document: Document ID of the employment contract
	Document *types.GUID `json:"Document,omitempty"`

	// Employee: ID of employee
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EmployeeType: Type of employee. 1 - Employee, 2 - Contractor, 3 - Temporary, 4 - Student, 5 - Flexworker
	EmployeeType *int `json:"EmployeeType,omitempty"`

	// EmployeeTypeDescription: Employee type description
	EmployeeTypeDescription *string `json:"EmployeeTypeDescription,omitempty"`

	// Employment: Employment ID
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentNumber: Employment number
	EmploymentNumber *int `json:"EmploymentNumber,omitempty"`

	// EndDate: End date of employment contract
	EndDate *types.Date `json:"EndDate,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ProbationEndDate: Employment probation end date
	ProbationEndDate *types.Date `json:"ProbationEndDate,omitempty"`

	// ProbationPeriod: Employment probation period
	ProbationPeriod *int `json:"ProbationPeriod,omitempty"`

	// ReasonContract: Employment contract reason code. 1 - New employment, 2 - Employment change, 3 - New legal employer, 4 - Acquisition 5 - Previous contract expired, 6 - Other
	ReasonContract *int `json:"ReasonContract,omitempty"`

	// ReasonContractDescription: Employment contract reason description
	ReasonContractDescription *string `json:"ReasonContractDescription,omitempty"`

	// Sequence: Sequence number
	Sequence *int `json:"Sequence,omitempty"`

	// StartDate: Start date of employment contract
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Type: Type of employment contract. 1 - Definite, 2 - Indefinite, 3 - External
	Type *int `json:"Type,omitempty"`

	// TypeDescription: Description of employment contract type
	TypeDescription *string `json:"TypeDescription,omitempty"`
}

func (e *PayrollEmploymentContracts) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *PayrollEmploymentContractsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Payroll/EmploymentContracts", method)
}

// List the PayrollEmploymentContracts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmploymentContractsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PayrollEmploymentContracts, error) {
	var entities []*PayrollEmploymentContracts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/EmploymentContracts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PayrollEmploymentContracts entitiy in the provided division.
func (s *PayrollEmploymentContractsEndpoint) Get(ctx context.Context, division int, id *int64) (*PayrollEmploymentContracts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/EmploymentContracts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PayrollEmploymentContracts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// FinancialTransactionLinesEndpoint is responsible for communicating with
// the FinancialTransactionLines endpoint of the Sync service.
type FinancialTransactionLinesEndpoint service

// FinancialTransactionLines:
// Service: Sync
// Entity: FinancialTransactionLines
// URL: /api/v1/{division}/sync/Financial/TransactionLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncFinancialTransactionLines
type FinancialTransactionLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Account:
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode:
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// AmountVATBaseFC:
	AmountVATBaseFC *float64 `json:"AmountVATBaseFC,omitempty"`

	// AmountVATFC:
	AmountVATFC *float64 `json:"AmountVATFC,omitempty"`

	// Asset:
	Asset *types.GUID `json:"Asset,omitempty"`

	// AssetCode:
	AssetCode *string `json:"AssetCode,omitempty"`

	// AssetDescription:
	AssetDescription *string `json:"AssetDescription,omitempty"`

	// CostCenter:
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription:
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit:
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription:
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// Date:
	Date *types.Date `json:"Date,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Document:
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DueDate:
	DueDate *types.Date `json:"DueDate,omitempty"`

	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ExchangeRate:
	ExchangeRate *float64 `json:"ExchangeRate,omitempty"`

	// ExternalLinkDescription:
	ExternalLinkDescription *string `json:"ExternalLinkDescription,omitempty"`

	// ExternalLinkReference:
	ExternalLinkReference *string `json:"ExternalLinkReference,omitempty"`

	// ExtraDutyAmountFC:
	ExtraDutyAmountFC *float64 `json:"ExtraDutyAmountFC,omitempty"`

	// ExtraDutyPercentage:
	ExtraDutyPercentage *float64 `json:"ExtraDutyPercentage,omitempty"`

	// FinancialPeriod:
	FinancialPeriod *int `json:"FinancialPeriod,omitempty"`

	// FinancialYear:
	FinancialYear *int `json:"FinancialYear,omitempty"`

	// GLAccount:
	GLAccount *types.GUID `json:"GLAccount,omitempty"`

	// GLAccountCode:
	GLAccountCode *string `json:"GLAccountCode,omitempty"`

	// GLAccountDescription:
	GLAccountDescription *string `json:"GLAccountDescription,omitempty"`

	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// InvoiceNumber:
	InvoiceNumber *int `json:"InvoiceNumber,omitempty"`

	// Item:
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode:
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription:
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// JournalCode:
	JournalCode *string `json:"JournalCode,omitempty"`

	// JournalDescription:
	JournalDescription *string `json:"JournalDescription,omitempty"`

	// LineNumber:
	LineNumber *int `json:"LineNumber,omitempty"`

	// LineType:
	LineType *int `json:"LineType,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// OffsetID:
	OffsetID *types.GUID `json:"OffsetID,omitempty"`

	// OrderNumber:
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// PaymentDiscountAmount:
	PaymentDiscountAmount *float64 `json:"PaymentDiscountAmount,omitempty"`

	// PaymentReference:
	PaymentReference *string `json:"PaymentReference,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode:
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// SerialNumber:
	SerialNumber *string `json:"SerialNumber,omitempty"`

	// Status:
	Status *int `json:"Status,omitempty"`

	// Subscription:
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription:
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// TrackingNumber:
	TrackingNumber *string `json:"TrackingNumber,omitempty"`

	// TrackingNumberDescription:
	TrackingNumberDescription *string `json:"TrackingNumberDescription,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// VATCode:
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription:
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`

	// VATPercentage:
	VATPercentage *float64 `json:"VATPercentage,omitempty"`

	// VATType:
	VATType *string `json:"VATType,omitempty"`

	// YourRef:
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *FinancialTransactionLines) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *FinancialTransactionLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Financial/TransactionLines", method)
}

// List the FinancialTransactionLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *FinancialTransactionLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*FinancialTransactionLines, error) {
	var entities []*FinancialTransactionLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Financial/TransactionLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the FinancialTransactionLines entitiy in the provided division.
func (s *FinancialTransactionLinesEndpoint) Get(ctx context.Context, division int, id *int64) (*FinancialTransactionLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Financial/TransactionLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &FinancialTransactionLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

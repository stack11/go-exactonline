// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// InventoryItemStorageLocationsEndpoint is responsible for communicating with
// the InventoryItemStorageLocations endpoint of the Sync service.
type InventoryItemStorageLocationsEndpoint service

// InventoryItemStorageLocations:
// Service: Sync
// Entity: InventoryItemStorageLocations
// URL: /api/v1/{division}/sync/Inventory/ItemStorageLocations
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncInventoryItemStorageLocations
type InventoryItemStorageLocations struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// ID: A guid that is the unique identifier of the linkage between item and warehouse
	ID *types.GUID `json:"ID,omitempty"`

	// Item: Item ID
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// MaximumStock: Maximum quantity of items that you want in warehouse
	MaximumStock *float64 `json:"MaximumStock,omitempty"`

	// MinimumStock: Minimum quantity of items that you want in warehouse
	MinimumStock *float64 `json:"MinimumStock,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// StorageLocation: This is a storage location
	StorageLocation *types.GUID `json:"StorageLocation,omitempty"`

	// StorageLocationCode: Storage location&#39;s code
	StorageLocationCode *string `json:"StorageLocationCode,omitempty"`

	// StorageLocationDescription: Storage location&#39;s description
	StorageLocationDescription *string `json:"StorageLocationDescription,omitempty"`

	// Type: Item storage location type options: 1-Pick location, 2-Bulk location
	Type *int `json:"Type,omitempty"`

	// Warehouse: Warehouse ID
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode: Code of warehouse
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription: Description of warehouse
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`
}

func (e *InventoryItemStorageLocations) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *InventoryItemStorageLocationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Inventory/ItemStorageLocations", method)
}

// List the InventoryItemStorageLocations entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventoryItemStorageLocationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*InventoryItemStorageLocations, error) {
	var entities []*InventoryItemStorageLocations
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/ItemStorageLocations", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the InventoryItemStorageLocations entitiy in the provided division.
func (s *InventoryItemStorageLocationsEndpoint) Get(ctx context.Context, division int, id *int64) (*InventoryItemStorageLocations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/ItemStorageLocations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &InventoryItemStorageLocations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

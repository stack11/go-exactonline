// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// DeletedEndpoint is responsible for communicating with
// the Deleted endpoint of the Sync service.
type DeletedEndpoint service

// Deleted:
// Service: Sync
// Entity: Deleted
// URL: /api/v1/{division}/sync/Deleted
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncDeleted
type Deleted struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// DeletedBy: UserID of person who deleted record
	DeletedBy *types.GUID `json:"DeletedBy,omitempty"`

	// DeletedDate: Deleted date
	DeletedDate *types.Date `json:"DeletedDate,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EntityKey: Entity key
	EntityKey *types.GUID `json:"EntityKey,omitempty"`

	// EntityType: Entity Types:	1= TransactionLines // 										2= Accounts // 										3= Addresses // 										4= Attachments // 										5= Contacts // 										6= Documents // 										7= GLAccounts // 										8= ItemPrices // 										9= Items // 										10= PaymentTerms // 										12= SalesOrders (This entity is going to be removed. Please refer to the new entity SalesOrderHeaders, SalesOrderLines.) // 										13= SalesInvoices // 										14= TimeCostTransactions // 										15= StockPositions // 										16= GoodsDeliveries // 										17= GoodsDeliveryLines // 										18= GLClassifications // 										19= ItemWarehouses // 										20= StorageLocationStockPositions // 										21= Projects // 										22= PurchaseOrders // 										23= Subscriptions // 										24= SubscriptionLines // 										25= ProjectWBS // 										26= ProjectPlanning // 										27= LeaveAbsenceHoursByDay // 										28= SerialBatchNumbers // 										29= StockSerialBatchNumbers // 										30= ItemAccounts // 										31= DiscountTables // 										32= SalesOrderHeaders // 										33= SalesOrderLines // 										34= QuotationHeaders // 										35= QuotationLines // 										36= ShopOrders // 										37= ShopOrderMaterialPlans // 										38= ShopOrderRoutingStepPlans // 										39= Schedules // 										40= ScheduleEntries // 										41= ItemStorageLocations // 										42= Employees // 										43= Employments // 										44= EmploymentContracts // 										45= EmploymentOrganizations // 										46= EmploymentCLAs // 										47= EmploymentSalaries // 										48= BankAccounts // 										49= EmploymentTaxAuthoritiesGeneral
	EntityType *int `json:"EntityType,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`
}

func (e *Deleted) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *DeletedEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "sync/Deleted", method)
}

// List the Deleted entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DeletedEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Deleted, error) {
	var entities []*Deleted
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Deleted", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Deleted entitiy in the provided division.
func (s *DeletedEndpoint) Get(ctx context.Context, division int, id *int64) (*Deleted, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Deleted", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Deleted{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

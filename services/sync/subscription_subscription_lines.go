// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SubscriptionSubscriptionLinesEndpoint is responsible for communicating with
// the SubscriptionSubscriptionLines endpoint of the Sync service.
type SubscriptionSubscriptionLinesEndpoint service

// SubscriptionSubscriptionLines:
// Service: Sync
// Entity: SubscriptionSubscriptionLines
// URL: /api/v1/{division}/sync/Subscription/SubscriptionLines
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncSubscriptionSubscriptionLines
type SubscriptionSubscriptionLines struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Costcenter:
	Costcenter *string `json:"Costcenter,omitempty"`

	// Costunit:
	Costunit *string `json:"Costunit,omitempty"`

	// CustomField:
	CustomField *string `json:"CustomField,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Discount:
	Discount *float64 `json:"Discount,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// FromDate:
	FromDate *types.Date `json:"FromDate,omitempty"`

	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// Item:
	Item *types.GUID `json:"Item,omitempty"`

	// ItemDescription:
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// LineNumber:
	LineNumber *int `json:"LineNumber,omitempty"`

	// LineType:
	LineType *int `json:"LineType,omitempty"`

	// LineTypeDescription:
	LineTypeDescription *string `json:"LineTypeDescription,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// NetPrice:
	NetPrice *float64 `json:"NetPrice,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// SubscriptionNumber:
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`

	// ToDate:
	ToDate *types.Date `json:"ToDate,omitempty"`

	// UnitCode:
	UnitCode *string `json:"UnitCode,omitempty"`

	// UnitDescription:
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// UnitPrice:
	UnitPrice *float64 `json:"UnitPrice,omitempty"`

	// VATAmountFC:
	VATAmountFC *float64 `json:"VATAmountFC,omitempty"`

	// VATCode:
	VATCode *string `json:"VATCode,omitempty"`

	// VATCodeDescription:
	VATCodeDescription *string `json:"VATCodeDescription,omitempty"`
}

func (e *SubscriptionSubscriptionLines) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *SubscriptionSubscriptionLinesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Subscription/SubscriptionLines", method)
}

// List the SubscriptionSubscriptionLines entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SubscriptionSubscriptionLinesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SubscriptionSubscriptionLines, error) {
	var entities []*SubscriptionSubscriptionLines
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Subscription/SubscriptionLines", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SubscriptionSubscriptionLines entitiy in the provided division.
func (s *SubscriptionSubscriptionLinesEndpoint) Get(ctx context.Context, division int, id *int64) (*SubscriptionSubscriptionLines, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Subscription/SubscriptionLines", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SubscriptionSubscriptionLines{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

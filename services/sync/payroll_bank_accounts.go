// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PayrollBankAccountsEndpoint is responsible for communicating with
// the PayrollBankAccounts endpoint of the Sync service.
type PayrollBankAccountsEndpoint service

// PayrollBankAccounts:
// Service: Sync
// Entity: PayrollBankAccounts
// URL: /api/v1/{division}/sync/Payroll/BankAccounts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncPayrollBankAccounts
type PayrollBankAccounts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// BankAccountHolderName: The bank account holder name. (maximum of 50 characters)
	BankAccountHolderName *string `json:"BankAccountHolderName,omitempty"`

	// BICCode: BIC code of the bank where the bank account is held. (maximum of 11 characters)
	BICCode *string `json:"BICCode,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: The description of the bank account. (maximum of 60 characters)
	Description *string `json:"Description,omitempty"`

	// Employee: This is the employee id to which the bank account belongs to.
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Numeric number of Employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Main: This indicates if the bank account is the main bank account. Set this to true if the bank account is the main bank account. If there are no bank accounts, the first bank account will automatically be set as the main bank account.
	Main *bool `json:"Main,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Number: This is the bank account number.
	Number *string `json:"Number,omitempty"`
}

func (e *PayrollBankAccounts) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *PayrollBankAccountsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Payroll/BankAccounts", method)
}

// List the PayrollBankAccounts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollBankAccountsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PayrollBankAccounts, error) {
	var entities []*PayrollBankAccounts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/BankAccounts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PayrollBankAccounts entitiy in the provided division.
func (s *PayrollBankAccountsEndpoint) Get(ctx context.Context, division int, id *int64) (*PayrollBankAccounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/BankAccounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PayrollBankAccounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

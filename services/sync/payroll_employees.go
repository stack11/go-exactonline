// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PayrollEmployeesEndpoint is responsible for communicating with
// the PayrollEmployees endpoint of the Sync service.
type PayrollEmployeesEndpoint service

// PayrollEmployees:
// Service: Sync
// Entity: PayrollEmployees
// URL: /api/v1/{division}/sync/Payroll/Employees
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncPayrollEmployees
type PayrollEmployees struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// AddressLine2: Second address lineNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	AddressLine2 *string `json:"AddressLine2,omitempty"`

	// AddressLine3: Third address lineNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	AddressLine3 *string `json:"AddressLine3,omitempty"`

	// AddressStreet: Street of addressNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	AddressStreet *string `json:"AddressStreet,omitempty"`

	// AddressStreetNumber: Street number of addressNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	AddressStreetNumber *string `json:"AddressStreetNumber,omitempty"`

	// AddressStreetNumberSuffix: Street number suffix of addressNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	AddressStreetNumberSuffix *string `json:"AddressStreetNumberSuffix,omitempty"`

	// BirthDate: Birth dateNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	BirthDate *types.Date `json:"BirthDate,omitempty"`

	// BirthName: Birth name
	BirthName *string `json:"BirthName,omitempty"`

	// BirthNamePrefix: Birth middle name
	BirthNamePrefix *string `json:"BirthNamePrefix,omitempty"`

	// BirthPlace: Birth placeNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	BirthPlace *string `json:"BirthPlace,omitempty"`

	// BusinessEmail: Email of the employee at the office
	BusinessEmail *string `json:"BusinessEmail,omitempty"`

	// BusinessFax: Fax number of the employee at the office
	BusinessFax *string `json:"BusinessFax,omitempty"`

	// BusinessMobile: Office mobile number of the employee
	BusinessMobile *string `json:"BusinessMobile,omitempty"`

	// BusinessPhone: Phone number of the employee at the office
	BusinessPhone *string `json:"BusinessPhone,omitempty"`

	// BusinessPhoneExtension: Phone extension of the employee at the office
	BusinessPhoneExtension *string `json:"BusinessPhoneExtension,omitempty"`

	// City: CityNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	City *string `json:"City,omitempty"`

	// Code: Code of the employee
	Code *string `json:"Code,omitempty"`

	// Country: Country codeNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	Country *string `json:"Country,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Customer: Customer ID
	Customer *types.GUID `json:"Customer,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Email: Page: User maintenance page; Section: PersonalE-mail address of a user. If employee is linked to a user, the user email is stored in this property.Note:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employeesUsers created in Exact Online can access the company or companies in an administration.
	Email *string `json:"Email,omitempty"`

	// EmployeeHID: Employee number
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate: End date of the employee
	EndDate *types.Date `json:"EndDate,omitempty"`

	// FirstName: First name of the employee
	FirstName *string `json:"FirstName,omitempty"`

	// FullName: Full name of the employee
	FullName *string `json:"FullName,omitempty"`

	// Gender: Gender
	Gender *string `json:"Gender,omitempty"`

	// HID: Numeric ID of the employee
	HID *int `json:"HID,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Initials: Initials
	Initials *string `json:"Initials,omitempty"`

	// IsActive: IsActive
	IsActive *bool `json:"IsActive,omitempty"`

	// IsAnonymised: Indicates whether the employee is anonymised.
	IsAnonymised *byte `json:"IsAnonymised,omitempty"`

	// Language: Language code
	Language *string `json:"Language,omitempty"`

	// LastName: Last name
	LastName *string `json:"LastName,omitempty"`

	// LocationDescription: Description of the location of the employee (where am I?)
	LocationDescription *string `json:"LocationDescription,omitempty"`

	// Manager: Direct manager of the employeeNote:  The manager must  be in the same division as the employeeThe manager should not  be subordinate of their employee
	Manager *types.GUID `json:"Manager,omitempty"`

	// MaritalDate: Date of marriageNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	MaritalDate *types.Date `json:"MaritalDate,omitempty"`

	// MaritalStatus: Marital statusNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	MaritalStatus *int `json:"MaritalStatus,omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:"MiddleName,omitempty"`

	// Mobile: Mobile phoneNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	Mobile *string `json:"Mobile,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NameComposition:
	NameComposition *int `json:"NameComposition,omitempty"`

	// Nationality: NationalityNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	Nationality *string `json:"Nationality,omitempty"`

	// NickName: Nick name
	NickName *string `json:"NickName,omitempty"`

	// Notes: Additional notes
	Notes *string `json:"Notes,omitempty"`

	// PartnerName: Name of partnerNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	PartnerName *string `json:"PartnerName,omitempty"`

	// PartnerNamePrefix: Middle name of partnerNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	PartnerNamePrefix *string `json:"PartnerNamePrefix,omitempty"`

	// Person: Reference to the persons table in which the personal data of the employee is stored
	Person *types.GUID `json:"Person,omitempty"`

	// Phone: Phone numberNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	Phone *string `json:"Phone,omitempty"`

	// PhoneExtension: Phone number extensionNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	PhoneExtension *string `json:"PhoneExtension,omitempty"`

	// Picture: Bytes of the logo image
	Picture *[]byte `json:"Picture,omitempty"`

	// PictureFileName: Filename of picture
	PictureFileName *string `json:"PictureFileName,omitempty"`

	// PictureThumbnailUrl: Thumbnail url of the picture
	PictureThumbnailUrl *string `json:"PictureThumbnailUrl,omitempty"`

	// PictureUrl: Url of picture
	PictureUrl *string `json:"PictureUrl,omitempty"`

	// Postcode: PostcodeNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	Postcode *string `json:"Postcode,omitempty"`

	// PrivateEmail: Section: Personal Personal e-mail address of the employee.Note:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	PrivateEmail *string `json:"PrivateEmail,omitempty"`

	// SocialSecurityNumber: Social security numberNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	SocialSecurityNumber *string `json:"SocialSecurityNumber,omitempty"`

	// StartDate: Start date of the employee
	StartDate *types.Date `json:"StartDate,omitempty"`

	// State: StateNote:  The value is only returned if user has any of the following roles: View userEnter variable payroll mutationsManage employeesAnonymise employee and userView personal information Of employees
	State *string `json:"State,omitempty"`

	// Title: Title
	Title *string `json:"Title,omitempty"`

	// User: User ID of employee
	User *types.GUID `json:"User,omitempty"`

	// UserFullName: Name of user
	UserFullName *string `json:"UserFullName,omitempty"`
}

func (e *PayrollEmployees) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *PayrollEmployeesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Payroll/Employees", method)
}

// List the PayrollEmployees entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmployeesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PayrollEmployees, error) {
	var entities []*PayrollEmployees
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/Employees", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PayrollEmployees entitiy in the provided division.
func (s *PayrollEmployeesEndpoint) Get(ctx context.Context, division int, id *int64) (*PayrollEmployees, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/Employees", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PayrollEmployees{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectProjectWBSEndpoint is responsible for communicating with
// the ProjectProjectWBS endpoint of the Sync service.
type ProjectProjectWBSEndpoint service

// ProjectProjectWBS:
// Service: Sync
// Entity: ProjectProjectWBS
// URL: /api/v1/{division}/sync/Project/ProjectWBS
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncProjectProjectWBS
type ProjectProjectWBS struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// BlockEntry: A boolean field to indicated if time and cost entries is blocked
	BlockEntry *byte `json:"BlockEntry,omitempty"`

	// BlockRebilling: A boolean field to indicated if rebilling is blocked. Only for expense
	BlockRebilling *byte `json:"BlockRebilling,omitempty"`

	// BudgetedCost: Budget cost of the WBS activity and expense
	BudgetedCost *float64 `json:"BudgetedCost,omitempty"`

	// BudgetedHours: Budget hours of the WBS. Only for activity
	BudgetedHours *float64 `json:"BudgetedHours,omitempty"`

	// BudgetedQuantity: Budget quantity of the WBS. Only for expense
	BudgetedQuantity *float64 `json:"BudgetedQuantity,omitempty"`

	// BudgetedRevenue: Revenue of the WBS. Only for activity and expense
	BudgetedRevenue *float64 `json:"BudgetedRevenue,omitempty"`

	// BudgetOverrunHours: BudgetOverrunHours: 10-Allowed, 20-Not Allowed. Only for activity
	BudgetOverrunHours *byte `json:"BudgetOverrunHours,omitempty"`

	// Completed: A boolean field to indicated if the project WBS deliverable is completed.
	Completed *byte `json:"Completed,omitempty"`

	// Created: The date and time when the WBS was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: The ID of the user that created the WBS
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: The full name of the user that created the WBS
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// CustomField: Custom field endpoint. Provided only for the Exact Online Premium users.
	CustomField *string `json:"CustomField,omitempty"`

	// DefaultItem: Default item to used for timecost entry
	DefaultItem *types.GUID `json:"DefaultItem,omitempty"`

	// DefaultItemIsMandatory: To indicated if only default item is allowed. Only for activity
	DefaultItemIsMandatory *byte `json:"DefaultItemIsMandatory,omitempty"`

	// Description: Description of the project WBS
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EndDate: EndDate of the WBS. If it is a deliverable then EndDate is the lastest EndDate of its children
	EndDate *types.Date `json:"EndDate,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// InvoiceDate: The invoice date of the WBS when invoice term is generated
	InvoiceDate *types.Date `json:"InvoiceDate,omitempty"`

	// InvoiceMethod: The invoice method of the WBS. For activity: null = According to parent, 2 = Fixed price, 3 = Time and Material, 4 = Non billable, 5 = Prepaid. For expense: null = According to parent, 6 = Fixed, 7 = Rebill, 8 = Non re-billable
	InvoiceMethod *int `json:"InvoiceMethod,omitempty"`

	// InvoiceSeparately: To indicated if additional invoice is allowed on this WBS.  // 						Additional invoice can only be set when the project type is fixed price or prepaid and the project allow additional invoices.  // 						Only for activity and expense. (Obsolete)
	InvoiceSeparately *byte `json:"InvoiceSeparately,omitempty"`

	// MarkupPercentage: Markup percentage for WBS expense
	MarkupPercentage *float64 `json:"MarkupPercentage,omitempty"`

	// Milestone: To indicated if this is a milestone for WBS deliverable
	Milestone *byte `json:"Milestone,omitempty"`

	// Modified: Last modified date and time
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: The Guid ID of the user that modified the records
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: The full name of the user that modified the WBS
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: For additional information about wbs
	Notes *string `json:"Notes,omitempty"`

	// PartOf: ID of the parent WBS
	PartOf *types.GUID `json:"PartOf,omitempty"`

	// PartOfDescription: Description of part of
	PartOfDescription *string `json:"PartOfDescription,omitempty"`

	// Project: ID of the project that linked to WBS
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectDescription: Description of the project that linked to WBS
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectTerm: ID of invoice term that linked to the WBS deliverable. Invoice term can only be linked when the project is using billing milestones and the deliverable is set as a milestone
	ProjectTerm *types.GUID `json:"ProjectTerm,omitempty"`

	// ProjectTermDescription: Description of invoice term that linked to the WBS deliverable
	ProjectTermDescription *string `json:"ProjectTermDescription,omitempty"`

	// PurchasePrice: Purchase price of the item. Only for expense
	PurchasePrice *float64 `json:"PurchasePrice,omitempty"`

	// SequenceNumber: Sequence number of the WBS. Last sequence will be selected if not specified
	SequenceNumber *int `json:"SequenceNumber,omitempty"`

	// StartDate: Startdate of the WBS. If it is a deliverable then StartDate is the earliest StartDate of its children
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Supplier: Supplier of the item. Only for expense
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// TimeQuantityToAlert: Alert when exceeding this time quantity for WBS activity
	TimeQuantityToAlert *float64 `json:"TimeQuantityToAlert,omitempty"`

	// Type: The type of project WBS. E.g: 1 = Deliverable, 2 = Activity, 3 = Expense
	Type *int `json:"Type,omitempty"`
}

func (e *ProjectProjectWBS) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *ProjectProjectWBSEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Project/ProjectWBS", method)
}

// List the ProjectProjectWBS entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectProjectWBSEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectProjectWBS, error) {
	var entities []*ProjectProjectWBS
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/ProjectWBS", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectProjectWBS entitiy in the provided division.
func (s *ProjectProjectWBSEndpoint) Get(ctx context.Context, division int, id *int64) (*ProjectProjectWBS, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/ProjectWBS", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectProjectWBS{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

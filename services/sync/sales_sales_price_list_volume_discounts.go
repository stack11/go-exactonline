// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SalesSalesPriceListVolumeDiscountsEndpoint is responsible for communicating with
// the SalesSalesPriceListVolumeDiscounts endpoint of the Sync service.
type SalesSalesPriceListVolumeDiscountsEndpoint service

// SalesSalesPriceListVolumeDiscounts:
// Service: Sync
// Entity: SalesSalesPriceListVolumeDiscounts
// URL: /api/v1/{division}/sync/Sales/SalesPriceListVolumeDiscounts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncSalesSalesPriceListVolumeDiscounts
type SalesSalesPriceListVolumeDiscounts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// BasePrice: ID of the base price.  If base price = use the standard sales price, it shows null.  If base price = set sales price, it shows ID of the sales price within this volume discount.
	BasePrice *types.GUID `json:"BasePrice,omitempty"`

	// BasePriceAmount: Amount of the base price.  If base price = use the standard sales price, it shows the latest item sales price. If base price = set sales price, it shows the base price which defined in price list.
	BasePriceAmount *float64 `json:"BasePriceAmount,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Discount: Discount
	Discount *float64 `json:"Discount,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EntryMethod: Indicates whether discount or the new price is leading : 1-Discount, 2-New price.  Scenario  1. When entry method is Discount and use base price, Discounted price = (1 - SalesPriceListVolumeDiscounts.Discount) * SalesPriceListVolumeDiscounts.BasePriceAmount  2. When entry method is Discount and use Item&#39;s standard sales price, Discounted price = (1 - SalesPriceListVolumeDiscounts.Discount) * SalesItemPrices.Price  3. When entry method is New price, Discounted price = SalesPriceListVolumeDiscounts.NewPrice
	EntryMethod *int `json:"EntryMethod,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Item: Item ID
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of the item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemGroup: Item group ID
	ItemGroup *types.GUID `json:"ItemGroup,omitempty"`

	// ItemGroupCode: Item group code
	ItemGroupCode *string `json:"ItemGroupCode,omitempty"`

	// ItemGroupDescription: Item group description
	ItemGroupDescription *string `json:"ItemGroupDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NewPrice: New price after discount
	NewPrice *float64 `json:"NewPrice,omitempty"`

	// NumberOfItemsPerUnit: Number of the item per unit
	NumberOfItemsPerUnit *float64 `json:"NumberOfItemsPerUnit,omitempty"`

	// PriceListCode: Code of the PriceList
	PriceListCode *string `json:"PriceListCode,omitempty"`

	// PriceListDescription: Description of the PriceList
	PriceListDescription *string `json:"PriceListDescription,omitempty"`

	// PriceListPeriod: Price list period ID
	PriceListPeriod *types.GUID `json:"PriceListPeriod,omitempty"`

	// Quantity: Quantity
	Quantity *float64 `json:"Quantity,omitempty"`

	// Unit: Unit
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription: Description of the unit
	UnitDescription *string `json:"UnitDescription,omitempty"`
}

func (e *SalesSalesPriceListVolumeDiscounts) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *SalesSalesPriceListVolumeDiscountsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Sales/SalesPriceListVolumeDiscounts", method)
}

// List the SalesSalesPriceListVolumeDiscounts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SalesSalesPriceListVolumeDiscountsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SalesSalesPriceListVolumeDiscounts, error) {
	var entities []*SalesSalesPriceListVolumeDiscounts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Sales/SalesPriceListVolumeDiscounts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SalesSalesPriceListVolumeDiscounts entitiy in the provided division.
func (s *SalesSalesPriceListVolumeDiscountsEndpoint) Get(ctx context.Context, division int, id *int64) (*SalesSalesPriceListVolumeDiscounts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Sales/SalesPriceListVolumeDiscounts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SalesSalesPriceListVolumeDiscounts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

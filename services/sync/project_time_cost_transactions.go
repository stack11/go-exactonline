// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectTimeCostTransactionsEndpoint is responsible for communicating with
// the ProjectTimeCostTransactions endpoint of the Sync service.
type ProjectTimeCostTransactionsEndpoint service

// ProjectTimeCostTransactions:
// Service: Sync
// Entity: ProjectTimeCostTransactions
// URL: /api/v1/{division}/sync/Project/TimeCostTransactions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncProjectTimeCostTransactions
type ProjectTimeCostTransactions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Account:
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName:
	AccountName *string `json:"AccountName,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// Attachment:
	Attachment *types.GUID `json:"Attachment,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// CustomField:
	CustomField *string `json:"CustomField,omitempty"`

	// Date:
	Date *types.Date `json:"Date,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// DivisionDescription:
	DivisionDescription *string `json:"DivisionDescription,omitempty"`

	// Employee:
	Employee *types.GUID `json:"Employee,omitempty"`

	// EndTime:
	EndTime *types.Date `json:"EndTime,omitempty"`

	// EntryNumber:
	EntryNumber *int `json:"EntryNumber,omitempty"`

	// ErrorText:
	ErrorText *string `json:"ErrorText,omitempty"`

	// HourStatus:
	HourStatus *int `json:"HourStatus,omitempty"`

	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// Item:
	Item *types.GUID `json:"Item,omitempty"`

	// ItemDescription:
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable:
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// PriceFC:
	PriceFC *float64 `json:"PriceFC,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectAccount:
	ProjectAccount *types.GUID `json:"ProjectAccount,omitempty"`

	// ProjectAccountCode:
	ProjectAccountCode *string `json:"ProjectAccountCode,omitempty"`

	// ProjectAccountName:
	ProjectAccountName *string `json:"ProjectAccountName,omitempty"`

	// ProjectCode:
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// StartTime:
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Subscription:
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionAccount:
	SubscriptionAccount *types.GUID `json:"SubscriptionAccount,omitempty"`

	// SubscriptionAccountCode:
	SubscriptionAccountCode *string `json:"SubscriptionAccountCode,omitempty"`

	// SubscriptionAccountName:
	SubscriptionAccountName *string `json:"SubscriptionAccountName,omitempty"`

	// SubscriptionDescription:
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// SubscriptionNumber:
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`

	// Type:
	Type *int `json:"Type,omitempty"`

	// WBS:
	WBS *types.GUID `json:"WBS,omitempty"`

	// WBSDescription:
	WBSDescription *string `json:"WBSDescription,omitempty"`
}

func (e *ProjectTimeCostTransactions) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *ProjectTimeCostTransactionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Project/TimeCostTransactions", method)
}

// List the ProjectTimeCostTransactions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectTimeCostTransactionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectTimeCostTransactions, error) {
	var entities []*ProjectTimeCostTransactions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/TimeCostTransactions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectTimeCostTransactions entitiy in the provided division.
func (s *ProjectTimeCostTransactionsEndpoint) Get(ctx context.Context, division int, id *int64) (*ProjectTimeCostTransactions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Project/TimeCostTransactions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectTimeCostTransactions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

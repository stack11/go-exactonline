// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SubscriptionSubscriptionsEndpoint is responsible for communicating with
// the SubscriptionSubscriptions endpoint of the Sync service.
type SubscriptionSubscriptionsEndpoint service

// SubscriptionSubscriptions:
// Service: Sync
// Entity: SubscriptionSubscriptions
// URL: /api/v1/{division}/sync/Subscription/Subscriptions
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncSubscriptionSubscriptions
type SubscriptionSubscriptions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// BlockEntry:
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// CancellationDate:
	CancellationDate *types.Date `json:"CancellationDate,omitempty"`

	// Classification:
	Classification *types.GUID `json:"Classification,omitempty"`

	// ClassificationCode:
	ClassificationCode *string `json:"ClassificationCode,omitempty"`

	// ClassificationDescription:
	ClassificationDescription *string `json:"ClassificationDescription,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// CustomerPONumber:
	CustomerPONumber *string `json:"CustomerPONumber,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// EndDate:
	EndDate *types.Date `json:"EndDate,omitempty"`

	// EntryID:
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// InvoiceDay:
	InvoiceDay *byte `json:"InvoiceDay,omitempty"`

	// InvoicedTo:
	InvoicedTo *types.Date `json:"InvoicedTo,omitempty"`

	// InvoiceTo:
	InvoiceTo *types.GUID `json:"InvoiceTo,omitempty"`

	// InvoiceToContactPerson:
	InvoiceToContactPerson *types.GUID `json:"InvoiceToContactPerson,omitempty"`

	// InvoiceToContactPersonFullName:
	InvoiceToContactPersonFullName *string `json:"InvoiceToContactPersonFullName,omitempty"`

	// InvoiceToName:
	InvoiceToName *string `json:"InvoiceToName,omitempty"`

	// InvoicingStartDate:
	InvoicingStartDate *types.Date `json:"InvoicingStartDate,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// Number:
	Number *int `json:"Number,omitempty"`

	// OrderedBy:
	OrderedBy *types.GUID `json:"OrderedBy,omitempty"`

	// OrderedByContactPerson:
	OrderedByContactPerson *types.GUID `json:"OrderedByContactPerson,omitempty"`

	// OrderedByContactPersonFullName:
	OrderedByContactPersonFullName *string `json:"OrderedByContactPersonFullName,omitempty"`

	// OrderedByName:
	OrderedByName *string `json:"OrderedByName,omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// Printed:
	Printed *bool `json:"Printed,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ReasonCancelled:
	ReasonCancelled *types.GUID `json:"ReasonCancelled,omitempty"`

	// ReasonCancelledCode:
	ReasonCancelledCode *string `json:"ReasonCancelledCode,omitempty"`

	// ReasonCancelledDescription:
	ReasonCancelledDescription *string `json:"ReasonCancelledDescription,omitempty"`

	// StartDate:
	StartDate *types.Date `json:"StartDate,omitempty"`

	// SubscriptionType:
	SubscriptionType *types.GUID `json:"SubscriptionType,omitempty"`

	// SubscriptionTypeCode:
	SubscriptionTypeCode *string `json:"SubscriptionTypeCode,omitempty"`

	// SubscriptionTypeDescription:
	SubscriptionTypeDescription *string `json:"SubscriptionTypeDescription,omitempty"`
}

func (e *SubscriptionSubscriptions) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *SubscriptionSubscriptionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Subscription/Subscriptions", method)
}

// List the SubscriptionSubscriptions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SubscriptionSubscriptionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SubscriptionSubscriptions, error) {
	var entities []*SubscriptionSubscriptions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Subscription/Subscriptions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SubscriptionSubscriptions entitiy in the provided division.
func (s *SubscriptionSubscriptionsEndpoint) Get(ctx context.Context, division int, id *int64) (*SubscriptionSubscriptions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Subscription/Subscriptions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SubscriptionSubscriptions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PayrollEmploymentOrganizationsEndpoint is responsible for communicating with
// the PayrollEmploymentOrganizations endpoint of the Sync service.
type PayrollEmploymentOrganizationsEndpoint service

// PayrollEmploymentOrganizations:
// Service: Sync
// Entity: PayrollEmploymentOrganizations
// URL: /api/v1/{division}/sync/Payroll/EmploymentOrganizations
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncPayrollEmploymentOrganizations
type PayrollEmploymentOrganizations struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// CostCenter: Cost center code
	CostCenter *string `json:"CostCenter,omitempty"`

	// CostCenterDescription: Description of cost center
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit: Cost unit code
	CostUnit *string `json:"CostUnit,omitempty"`

	// CostUnitDescription: Description of cost unit
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Department: ID of department
	Department *types.GUID `json:"Department,omitempty"`

	// DepartmentCode: Department code
	DepartmentCode *string `json:"DepartmentCode,omitempty"`

	// DepartmentDescription: Department description for organization
	DepartmentDescription *string `json:"DepartmentDescription,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: ID of employee
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: Employment ID
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentNumber: Employment number
	EmploymentNumber *int `json:"EmploymentNumber,omitempty"`

	// EndDate: Organization end date
	EndDate *types.Date `json:"EndDate,omitempty"`

	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// JobTitle: ID of job title
	JobTitle *types.GUID `json:"JobTitle,omitempty"`

	// JobTitleCode: Job title code
	JobTitleCode *string `json:"JobTitleCode,omitempty"`

	// JobTitleDescription: Job title description
	JobTitleDescription *string `json:"JobTitleDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// StartDate: Organization start date
	StartDate *types.Date `json:"StartDate,omitempty"`
}

func (e *PayrollEmploymentOrganizations) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *PayrollEmploymentOrganizationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Payroll/EmploymentOrganizations", method)
}

// List the PayrollEmploymentOrganizations entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PayrollEmploymentOrganizationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PayrollEmploymentOrganizations, error) {
	var entities []*PayrollEmploymentOrganizations
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/EmploymentOrganizations", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PayrollEmploymentOrganizations entitiy in the provided division.
func (s *PayrollEmploymentOrganizationsEndpoint) Get(ctx context.Context, division int, id *int64) (*PayrollEmploymentOrganizations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Payroll/EmploymentOrganizations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PayrollEmploymentOrganizations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

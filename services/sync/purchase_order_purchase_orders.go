// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// PurchaseOrderPurchaseOrdersEndpoint is responsible for communicating with
// the PurchaseOrderPurchaseOrders endpoint of the Sync service.
type PurchaseOrderPurchaseOrdersEndpoint service

// PurchaseOrderPurchaseOrders:
// Service: Sync
// Entity: PurchaseOrderPurchaseOrders
// URL: /api/v1/{division}/sync/PurchaseOrder/PurchaseOrders
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncPurchaseOrderPurchaseOrders
type PurchaseOrderPurchaseOrders struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp:
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// AmountDC:
	AmountDC *float64 `json:"AmountDC,omitempty"`

	// AmountDiscount:
	AmountDiscount *float64 `json:"AmountDiscount,omitempty"`

	// AmountDiscountExclVat:
	AmountDiscountExclVat *float64 `json:"AmountDiscountExclVat,omitempty"`

	// AmountFC:
	AmountFC *float64 `json:"AmountFC,omitempty"`

	// AmountFCExclVat:
	AmountFCExclVat *float64 `json:"AmountFCExclVat,omitempty"`

	// ApprovalStatus:
	ApprovalStatus *int `json:"ApprovalStatus,omitempty"`

	// ApprovalStatusDescription:
	ApprovalStatusDescription *string `json:"ApprovalStatusDescription,omitempty"`

	// Approved:
	Approved *types.Date `json:"Approved,omitempty"`

	// Approver:
	Approver *types.GUID `json:"Approver,omitempty"`

	// ApproverFullName:
	ApproverFullName *string `json:"ApproverFullName,omitempty"`

	// CostCenter:
	CostCenter *types.GUID `json:"CostCenter,omitempty"`

	// CostCenterCode:
	CostCenterCode *string `json:"CostCenterCode,omitempty"`

	// CostCenterDescription:
	CostCenterDescription *string `json:"CostCenterDescription,omitempty"`

	// CostUnit:
	CostUnit *types.GUID `json:"CostUnit,omitempty"`

	// CostUnitCode:
	CostUnitCode *string `json:"CostUnitCode,omitempty"`

	// CostUnitDescription:
	CostUnitDescription *string `json:"CostUnitDescription,omitempty"`

	// Created:
	Created *types.Date `json:"Created,omitempty"`

	// Creator:
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName:
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency:
	Currency *string `json:"Currency,omitempty"`

	// CustomField:
	CustomField *string `json:"CustomField,omitempty"`

	// DeliveryAccount:
	DeliveryAccount *types.GUID `json:"DeliveryAccount,omitempty"`

	// DeliveryAccountCode:
	DeliveryAccountCode *string `json:"DeliveryAccountCode,omitempty"`

	// DeliveryAccountName:
	DeliveryAccountName *string `json:"DeliveryAccountName,omitempty"`

	// DeliveryAddress:
	DeliveryAddress *types.GUID `json:"DeliveryAddress,omitempty"`

	// DeliveryContact:
	DeliveryContact *types.GUID `json:"DeliveryContact,omitempty"`

	// DeliveryContactPersonFullName:
	DeliveryContactPersonFullName *string `json:"DeliveryContactPersonFullName,omitempty"`

	// Description:
	Description *string `json:"Description,omitempty"`

	// Discount:
	Discount *float64 `json:"Discount,omitempty"`

	// Division:
	Division *int `json:"Division,omitempty"`

	// Document:
	Document *types.GUID `json:"Document,omitempty"`

	// DocumentNumber:
	DocumentNumber *int `json:"DocumentNumber,omitempty"`

	// DocumentSubject:
	DocumentSubject *string `json:"DocumentSubject,omitempty"`

	// DropShipment:
	DropShipment *bool `json:"DropShipment,omitempty"`

	// ExchangeRate:
	ExchangeRate *float64 `json:"ExchangeRate,omitempty"`

	// Expense:
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription:
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// IncotermAddress:
	IncotermAddress *string `json:"IncotermAddress,omitempty"`

	// IncotermCode:
	IncotermCode *string `json:"IncotermCode,omitempty"`

	// IncotermVersion:
	IncotermVersion *int `json:"IncotermVersion,omitempty"`

	// InvoicedQuantity:
	InvoicedQuantity *float64 `json:"InvoicedQuantity,omitempty"`

	// InvoiceStatus:
	InvoiceStatus *int `json:"InvoiceStatus,omitempty"`

	// IsBatchNumberItem:
	IsBatchNumberItem *byte `json:"IsBatchNumberItem,omitempty"`

	// IsSerialNumberItem:
	IsSerialNumberItem *byte `json:"IsSerialNumberItem,omitempty"`

	// Item:
	Item *types.GUID `json:"Item,omitempty"`

	// ItemBarcode:
	ItemBarcode *string `json:"ItemBarcode,omitempty"`

	// ItemCode:
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription:
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemDivisable:
	ItemDivisable *bool `json:"ItemDivisable,omitempty"`

	// LineNumber:
	LineNumber *int `json:"LineNumber,omitempty"`

	// Modified:
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier:
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName:
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// NetPrice:
	NetPrice *float64 `json:"NetPrice,omitempty"`

	// Notes:
	Notes *string `json:"Notes,omitempty"`

	// OrderDate:
	OrderDate *types.Date `json:"OrderDate,omitempty"`

	// OrderNumber:
	OrderNumber *int `json:"OrderNumber,omitempty"`

	// OrderStatus:
	OrderStatus *int `json:"OrderStatus,omitempty"`

	// PaymentCondition:
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription:
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// Project:
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode:
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription:
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// PurchaseAgent:
	PurchaseAgent *types.GUID `json:"PurchaseAgent,omitempty"`

	// PurchaseAgentFullName:
	PurchaseAgentFullName *string `json:"PurchaseAgentFullName,omitempty"`

	// PurchaseOrderID:
	PurchaseOrderID *types.GUID `json:"PurchaseOrderID,omitempty"`

	// Quantity:
	Quantity *float64 `json:"Quantity,omitempty"`

	// QuantityInPurchaseUnits:
	QuantityInPurchaseUnits *float64 `json:"QuantityInPurchaseUnits,omitempty"`

	// Rebill:
	Rebill *bool `json:"Rebill,omitempty"`

	// ReceiptDate:
	ReceiptDate *types.Date `json:"ReceiptDate,omitempty"`

	// ReceiptStatus:
	ReceiptStatus *int `json:"ReceiptStatus,omitempty"`

	// ReceivedQuantity:
	ReceivedQuantity *float64 `json:"ReceivedQuantity,omitempty"`

	// Remarks:
	Remarks *string `json:"Remarks,omitempty"`

	// SalesOrder:
	SalesOrder *types.GUID `json:"SalesOrder,omitempty"`

	// SalesOrderLine:
	SalesOrderLine *types.GUID `json:"SalesOrderLine,omitempty"`

	// SalesOrderLineNumber:
	SalesOrderLineNumber *int `json:"SalesOrderLineNumber,omitempty"`

	// SalesOrderNumber:
	SalesOrderNumber *int `json:"SalesOrderNumber,omitempty"`

	// SelectionCode:
	SelectionCode *types.GUID `json:"SelectionCode,omitempty"`

	// SelectionCodeCode:
	SelectionCodeCode *string `json:"SelectionCodeCode,omitempty"`

	// SelectionCodeDescription:
	SelectionCodeDescription *string `json:"SelectionCodeDescription,omitempty"`

	// SendingMethod:
	SendingMethod *int `json:"SendingMethod,omitempty"`

	// ShippingMethod:
	ShippingMethod *types.GUID `json:"ShippingMethod,omitempty"`

	// ShippingMethodCode:
	ShippingMethodCode *string `json:"ShippingMethodCode,omitempty"`

	// ShippingMethodDescription:
	ShippingMethodDescription *string `json:"ShippingMethodDescription,omitempty"`

	// Source:
	Source *int `json:"Source,omitempty"`

	// Supplier:
	Supplier *types.GUID `json:"Supplier,omitempty"`

	// SupplierCode:
	SupplierCode *string `json:"SupplierCode,omitempty"`

	// SupplierContact:
	SupplierContact *types.GUID `json:"SupplierContact,omitempty"`

	// SupplierContactPersonFullName:
	SupplierContactPersonFullName *string `json:"SupplierContactPersonFullName,omitempty"`

	// SupplierItemCode:
	SupplierItemCode *string `json:"SupplierItemCode,omitempty"`

	// SupplierItemCopyRemarks:
	SupplierItemCopyRemarks *byte `json:"SupplierItemCopyRemarks,omitempty"`

	// SupplierName:
	SupplierName *string `json:"SupplierName,omitempty"`

	// Unit:
	Unit *string `json:"Unit,omitempty"`

	// UnitDescription:
	UnitDescription *string `json:"UnitDescription,omitempty"`

	// UnitPrice:
	UnitPrice *float64 `json:"UnitPrice,omitempty"`

	// VATAmount:
	VATAmount *float64 `json:"VATAmount,omitempty"`

	// VATCode:
	VATCode *string `json:"VATCode,omitempty"`

	// VATDescription:
	VATDescription *string `json:"VATDescription,omitempty"`

	// VATPercentage:
	VATPercentage *float64 `json:"VATPercentage,omitempty"`

	// Warehouse:
	Warehouse *types.GUID `json:"Warehouse,omitempty"`

	// WarehouseCode:
	WarehouseCode *string `json:"WarehouseCode,omitempty"`

	// WarehouseDescription:
	WarehouseDescription *string `json:"WarehouseDescription,omitempty"`

	// YourRef:
	YourRef *string `json:"YourRef,omitempty"`
}

func (e *PurchaseOrderPurchaseOrders) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *PurchaseOrderPurchaseOrdersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "PurchaseOrder/PurchaseOrders", method)
}

// List the PurchaseOrderPurchaseOrders entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *PurchaseOrderPurchaseOrdersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*PurchaseOrderPurchaseOrders, error) {
	var entities []*PurchaseOrderPurchaseOrders
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/PurchaseOrder/PurchaseOrders", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the PurchaseOrderPurchaseOrders entitiy in the provided division.
func (s *PurchaseOrderPurchaseOrdersEndpoint) Get(ctx context.Context, division int, id *int64) (*PurchaseOrderPurchaseOrders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/PurchaseOrder/PurchaseOrders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &PurchaseOrderPurchaseOrders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package sync

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// InventorySerialBatchNumbersEndpoint is responsible for communicating with
// the InventorySerialBatchNumbers endpoint of the Sync service.
type InventorySerialBatchNumbersEndpoint service

// InventorySerialBatchNumbers:
// Service: Sync
// Entity: InventorySerialBatchNumbers
// URL: /api/v1/{division}/sync/Inventory/SerialBatchNumbers
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SyncInventorySerialBatchNumbers
type InventorySerialBatchNumbers struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Timestamp: Timestamp
	Timestamp *int64 `json:"Timestamp,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// EndDate: End date of effective period for serial or batch number
	EndDate *types.Date `json:"EndDate,omitempty"`

	// ID: A guid that is the unique identifier of the serial or batch number
	ID *types.GUID `json:"ID,omitempty"`

	// IsBlocked: Boolean value indicating whether or not the serial or batch number is blocked
	IsBlocked *byte `json:"IsBlocked,omitempty"`

	// Item: Item
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Item code
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Remarks: Remarks
	Remarks *string `json:"Remarks,omitempty"`

	// SerialBatchNumber: Human readable serial or batch number
	SerialBatchNumber *string `json:"SerialBatchNumber,omitempty"`

	// StartDate: Start date of effective period for serial number
	StartDate *types.Date `json:"StartDate,omitempty"`

	// Type: Type of number (serial or batch) Available values:1 = Serial number2 = Batch number
	Type *int `json:"Type,omitempty"`
}

func (e *InventorySerialBatchNumbers) GetPrimary() *int64 {
	return e.Timestamp
}

func (s *InventorySerialBatchNumbersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "Inventory/SerialBatchNumbers", method)
}

// List the InventorySerialBatchNumbers entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *InventorySerialBatchNumbersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*InventorySerialBatchNumbers, error) {
	var entities []*InventorySerialBatchNumbers
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/SerialBatchNumbers", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the InventorySerialBatchNumbers entitiy in the provided division.
func (s *InventorySerialBatchNumbersEndpoint) Get(ctx context.Context, division int, id *int64) (*InventorySerialBatchNumbers, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/sync/Inventory/SerialBatchNumbers", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &InventorySerialBatchNumbers{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

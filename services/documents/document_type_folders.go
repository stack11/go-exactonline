// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package documents

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// DocumentTypeFoldersEndpoint is responsible for communicating with
// the DocumentTypeFolders endpoint of the Documents service.
type DocumentTypeFoldersEndpoint service

// DocumentTypeFolders:
// Service: Documents
// Entity: DocumentTypeFolders
// URL: /api/v1/{division}/documents/DocumentTypeFolders
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=DocumentsDocumentTypeFolders
type DocumentTypeFolders struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID:
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Date created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User id of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// DocumentFolder: Folder to which document type is linked
	DocumentFolder *types.GUID `json:"DocumentFolder,omitempty"`

	// DocumentType: Code of document type which is linked to folder
	DocumentType *int `json:"DocumentType,omitempty"`

	// Modified: Date Modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User id of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`
}

func (e *DocumentTypeFolders) GetPrimary() *types.GUID {
	return e.ID
}

func (s *DocumentTypeFoldersEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "documents/DocumentTypeFolders", method)
}

// List the DocumentTypeFolders entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DocumentTypeFoldersEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*DocumentTypeFolders, error) {
	var entities []*DocumentTypeFolders
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the DocumentTypeFolders entitiy in the provided division.
func (s *DocumentTypeFoldersEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*DocumentTypeFolders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &DocumentTypeFolders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty DocumentTypeFolders entity
func (s *DocumentTypeFoldersEndpoint) New() *DocumentTypeFolders {
	return &DocumentTypeFolders{}
}

// Create the DocumentTypeFolders entity in the provided division.
func (s *DocumentTypeFoldersEndpoint) Create(ctx context.Context, division int, entity *DocumentTypeFolders) (*DocumentTypeFolders, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders", division) // #nosec
	e := &DocumentTypeFolders{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the DocumentTypeFolders entity in the provided division.
func (s *DocumentTypeFoldersEndpoint) Update(ctx context.Context, division int, entity *DocumentTypeFolders) (*DocumentTypeFolders, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &DocumentTypeFolders{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the DocumentTypeFolders entity in the provided division.
func (s *DocumentTypeFoldersEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/documents/DocumentTypeFolders", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

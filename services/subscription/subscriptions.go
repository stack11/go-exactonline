// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package subscription

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SubscriptionsEndpoint is responsible for communicating with
// the Subscriptions endpoint of the Subscription service.
type SubscriptionsEndpoint service

// Subscriptions:
// Service: Subscription
// Entity: Subscriptions
// URL: /api/v1/{division}/subscription/Subscriptions
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SubscriptionSubscriptions
type Subscriptions struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// EntryID: Primary key
	EntryID *types.GUID `json:"EntryID,omitempty"`

	// BlockEntry: Indicates if subscription is blocked for time cost entry
	BlockEntry *bool `json:"BlockEntry,omitempty"`

	// CancellationDate: Date of cancellation
	CancellationDate *types.Date `json:"CancellationDate,omitempty"`

	// Classification: Guid ID of classification, to filter the report based on the classification of a subscription
	Classification *types.GUID `json:"Classification,omitempty"`

	// ClassificationCode: Code of classification, to filter the report based on the classification of a subscription
	ClassificationCode *string `json:"ClassificationCode,omitempty"`

	// ClassificationDescription: Description of classification, to filter the report based on the classification of a subscription
	ClassificationDescription *string `json:"ClassificationDescription,omitempty"`

	// Created: Date when the subscription was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: The Guid ID of the user that created the subscription
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: The full name of the user that created the subscription
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Currency: Currency code used in the transactions
	Currency *string `json:"Currency,omitempty"`

	// CustomerPONumber: Purchase order number of that is linked to customer
	CustomerPONumber *string `json:"CustomerPONumber,omitempty"`

	// Description: Description of the subscription
	Description *string `json:"Description,omitempty"`

	// Division: Division number of the company that the subscription is linked to
	Division *int `json:"Division,omitempty"`

	// EndDate: The date and time when the subscription ends
	EndDate *types.Date `json:"EndDate,omitempty"`

	// InvoiceDay: For monthly, quaterly, half-year and yearly invoice period, the day number of the month when the invoice of the subscription is sent. // 												 // 						While for weekly invoice period, the weekday number of the week when the invoice of the subscription is sent:  // 						0=Monday  // 						1=Tuesday  // 						2=Wednesday  // 						3=Thursday // 						4=Friday  // 						5=Saturday  // 						6=Sunday
	InvoiceDay *byte `json:"InvoiceDay,omitempty"`

	// InvoicedTo: The date when the invoice of the subscription is sent
	InvoicedTo *types.Date `json:"InvoicedTo,omitempty"`

	// InvoiceTo: The account which the subsciption is invoiced to
	InvoiceTo *types.GUID `json:"InvoiceTo,omitempty"`

	// InvoiceToContactPerson: The ID of the contact person that is linked to the account the subscription is invoice to
	InvoiceToContactPerson *types.GUID `json:"InvoiceToContactPerson,omitempty"`

	// InvoiceToContactPersonFullName: The name of the contact person that is linked to the account the subscription is invoice to
	InvoiceToContactPersonFullName *string `json:"InvoiceToContactPersonFullName,omitempty"`

	// InvoiceToName: Name of the account to invoice to
	InvoiceToName *string `json:"InvoiceToName,omitempty"`

	// InvoicingStartDate: Date to start invoicing the account
	InvoicingStartDate *types.Date `json:"InvoicingStartDate,omitempty"`

	// Modified: Date and time when the subscription has been modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: The ID of the user that modified the subscription
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: The name of the user that modified the subscription
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: For additional information regarding the subscription
	Notes *string `json:"Notes,omitempty"`

	// Number: Subscription number of the company
	Number *int `json:"Number,omitempty"`

	// OrderedBy: Reference to order account, GUID ID of the subscriber
	OrderedBy *types.GUID `json:"OrderedBy,omitempty"`

	// OrderedByContactPerson: Reference of contact person of order account, displays the contact name of the subscriber
	OrderedByContactPerson *types.GUID `json:"OrderedByContactPerson,omitempty"`

	// OrderedByContactPersonFullName: Name of contact person of order account, displays the full contact name of the subscriber
	OrderedByContactPersonFullName *string `json:"OrderedByContactPersonFullName,omitempty"`

	// OrderedByName: Name of order account, displays the name of the subscriber
	OrderedByName *string `json:"OrderedByName,omitempty"`

	// PaymentCondition: Code of subscriptions payment condition
	PaymentCondition *string `json:"PaymentCondition,omitempty"`

	// PaymentConditionDescription: Description of subscriptions payment condition
	PaymentConditionDescription *string `json:"PaymentConditionDescription,omitempty"`

	// Printed: Indicates if subscription has been printed
	Printed *bool `json:"Printed,omitempty"`

	// Project: The Guid ID of the project, reference to Project endpoint
	Project *types.GUID `json:"Project,omitempty"`

	// ReasonCancelled: Guid ID of the reason of cancellation record linked to the subscription
	ReasonCancelled *types.GUID `json:"ReasonCancelled,omitempty"`

	// ReasonCancelledCode: Code of the reason of cancellation record linked to the subscription
	ReasonCancelledCode *string `json:"ReasonCancelledCode,omitempty"`

	// ReasonCancelledDescription: Description of the reason of cancellation record linked to the subscription
	ReasonCancelledDescription *string `json:"ReasonCancelledDescription,omitempty"`

	// StartDate: Start date of the subscription
	StartDate *types.Date `json:"StartDate,omitempty"`

	// SubscriptionLines: Collection of subscription lines linked to the subscription link, can be referenced to SubscriptionLines endpoint
	SubscriptionLines *json.RawMessage `json:"SubscriptionLines,omitempty"`

	// SubscriptionRestrictionEmployees: Collection of employee&#39;s restriction, can be referenced to SubscriptionRestrictionEmployees endpoint
	SubscriptionRestrictionEmployees *json.RawMessage `json:"SubscriptionRestrictionEmployees,omitempty"`

	// SubscriptionRestrictionItems: Collection of restriction items linked to the subscription, can be referenced to SubscriptionRestrictionItems endpoint
	SubscriptionRestrictionItems *json.RawMessage `json:"SubscriptionRestrictionItems,omitempty"`

	// SubscriptionType: The GUID ID of the subscription condition, reference to SubscriptionType endpoint
	SubscriptionType *types.GUID `json:"SubscriptionType,omitempty"`

	// SubscriptionTypeCode: The code of the subscription condition record
	SubscriptionTypeCode *string `json:"SubscriptionTypeCode,omitempty"`

	// SubscriptionTypeDescription: The code of the subscription condition description
	SubscriptionTypeDescription *string `json:"SubscriptionTypeDescription,omitempty"`
}

func (e *Subscriptions) GetPrimary() *types.GUID {
	return e.EntryID
}

func (s *SubscriptionsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "subscription/Subscriptions", method)
}

// List the Subscriptions entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SubscriptionsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Subscriptions, error) {
	var entities []*Subscriptions
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/Subscriptions", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Subscriptions entitiy in the provided division.
func (s *SubscriptionsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Subscriptions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/Subscriptions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Subscriptions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty Subscriptions entity
func (s *SubscriptionsEndpoint) New() *Subscriptions {
	return &Subscriptions{}
}

// Create the Subscriptions entity in the provided division.
func (s *SubscriptionsEndpoint) Create(ctx context.Context, division int, entity *Subscriptions) (*Subscriptions, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/Subscriptions", division) // #nosec
	e := &Subscriptions{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the Subscriptions entity in the provided division.
func (s *SubscriptionsEndpoint) Update(ctx context.Context, division int, entity *Subscriptions) (*Subscriptions, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/Subscriptions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &Subscriptions{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the Subscriptions entity in the provided division.
func (s *SubscriptionsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/Subscriptions", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

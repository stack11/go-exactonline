// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package subscription

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// SubscriptionRestrictionEmployeesEndpoint is responsible for communicating with
// the SubscriptionRestrictionEmployees endpoint of the Subscription service.
type SubscriptionRestrictionEmployeesEndpoint service

// SubscriptionRestrictionEmployees:
// Service: Subscription
// Entity: SubscriptionRestrictionEmployees
// URL: /api/v1/{division}/subscription/SubscriptionRestrictionEmployees
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=SubscriptionSubscriptionRestrictionEmployees
type SubscriptionRestrictionEmployees struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Date and time when the subscription restriction was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: ID of user that created the subscription restriction
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Full name of user that created the subscription restriction
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: ID of employee that linked to the subscription restriction
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee that linked to the subscription restriction
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Readable ID of employee that linked to the subscription restriction
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Modified: Last modified date of subscription restriction
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: ID of last user that modified the subscription restriction
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Full name of last user that modified the subscription restriction
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Subscription: Subscription ID that the restriction is referenced to
	Subscription *types.GUID `json:"Subscription,omitempty"`

	// SubscriptionDescription: Subscription description that the restriction is referenced to
	SubscriptionDescription *string `json:"SubscriptionDescription,omitempty"`

	// SubscriptionNumber: Subscription number that the restriction is referenced to
	SubscriptionNumber *int `json:"SubscriptionNumber,omitempty"`
}

func (e *SubscriptionRestrictionEmployees) GetPrimary() *types.GUID {
	return e.ID
}

func (s *SubscriptionRestrictionEmployeesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "subscription/SubscriptionRestrictionEmployees", method)
}

// List the SubscriptionRestrictionEmployees entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *SubscriptionRestrictionEmployeesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*SubscriptionRestrictionEmployees, error) {
	var entities []*SubscriptionRestrictionEmployees
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the SubscriptionRestrictionEmployees entitiy in the provided division.
func (s *SubscriptionRestrictionEmployeesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*SubscriptionRestrictionEmployees, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &SubscriptionRestrictionEmployees{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty SubscriptionRestrictionEmployees entity
func (s *SubscriptionRestrictionEmployeesEndpoint) New() *SubscriptionRestrictionEmployees {
	return &SubscriptionRestrictionEmployees{}
}

// Create the SubscriptionRestrictionEmployees entity in the provided division.
func (s *SubscriptionRestrictionEmployeesEndpoint) Create(ctx context.Context, division int, entity *SubscriptionRestrictionEmployees) (*SubscriptionRestrictionEmployees, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees", division) // #nosec
	e := &SubscriptionRestrictionEmployees{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Delete the SubscriptionRestrictionEmployees entity in the provided division.
func (s *SubscriptionRestrictionEmployeesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/subscription/SubscriptionRestrictionEmployees", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

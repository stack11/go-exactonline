// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// EmploymentConditionGroupsEndpoint is responsible for communicating with
// the EmploymentConditionGroups endpoint of the Payroll service.
type EmploymentConditionGroupsEndpoint service

// EmploymentConditionGroups:
// Service: Payroll
// Entity: EmploymentConditionGroups
// URL: /api/v1/beta/{division}/payroll/EmploymentConditionGroups
// HasWebhook: false
// IsInBeta: true
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentConditionGroups
type EmploymentConditionGroups struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// CLACodeTaxOffice: CLA code tax office
	CLACodeTaxOffice *string `json:"CLACodeTaxOffice,omitempty"`

	// CLACodeTaxOfficeDescription: CLA code tax office description
	CLACodeTaxOfficeDescription *string `json:"CLACodeTaxOfficeDescription,omitempty"`

	// Code: Code
	Code *string `json:"Code,omitempty"`

	// Created: Created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: Creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Creator full name
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// Division: Division
	Division *int `json:"Division,omitempty"`

	// EndDate: End date
	EndDate *types.Date `json:"EndDate,omitempty"`

	// HoursPerWeek: Hours per week
	HoursPerWeek *float64 `json:"HoursPerWeek,omitempty"`

	// Modified: Modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Modifier full name
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// SBICode: SBI code
	SBICode *string `json:"SBICode,omitempty"`

	// SBICodeDescription: SBI code description
	SBICodeDescription *string `json:"SBICodeDescription,omitempty"`

	// StartDate: Start date
	StartDate *types.Date `json:"StartDate,omitempty"`
}

func (e *EmploymentConditionGroups) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentConditionGroupsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/EmploymentConditionGroups", method)
}

// List the EmploymentConditionGroups entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentConditionGroupsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmploymentConditionGroups, error) {
	var entities []*EmploymentConditionGroups
	u, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/payroll/EmploymentConditionGroups", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmploymentConditionGroups entitiy in the provided division.
func (s *EmploymentConditionGroupsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmploymentConditionGroups, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/payroll/EmploymentConditionGroups", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmploymentConditionGroups{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

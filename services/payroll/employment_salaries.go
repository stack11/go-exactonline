// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// EmploymentSalariesEndpoint is responsible for communicating with
// the EmploymentSalaries endpoint of the Payroll service.
type EmploymentSalariesEndpoint service

// EmploymentSalaries:
// Service: Payroll
// Entity: EmploymentSalaries
// URL: /api/v1/{division}/payroll/EmploymentSalaries
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmploymentSalaries
type EmploymentSalaries struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// AmountType: Salary Section: Salary typeValue: 0 - Gross, 1 - Net.
	AmountType *int `json:"AmountType,omitempty"`

	// AmountTypeDescription: Salary Section: Salary type descriptionWhen AmountType value is 0, return &#39;Gross&#39;When AmountType value 1, return &#39;Net&#39;
	AmountTypeDescription *string `json:"AmountTypeDescription,omitempty"`

	// AverageDaysPerWeek: The average number of contract days that an employee works per week
	AverageDaysPerWeek *float64 `json:"AverageDaysPerWeek,omitempty"`

	// AverageHoursPerWeek: The average number of contract hours that an employee works per week
	AverageHoursPerWeek *float64 `json:"AverageHoursPerWeek,omitempty"`

	// BillabilityTarget: Schedule Section: Billability target
	BillabilityTarget *float64 `json:"BillabilityTarget,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: General section: Custom description
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: Employee ID
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Employee number
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: Employment
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Obsolete
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EmploymentNumber: Employment number
	EmploymentNumber *int `json:"EmploymentNumber,omitempty"`

	// EmploymentSalaryType: Salary type of employment. 1 - Periodical (fixed), 2 - Per hour (variable)
	EmploymentSalaryType *int `json:"EmploymentSalaryType,omitempty"`

	// EmploymentSalaryTypeDescription: Salary type description
	EmploymentSalaryTypeDescription *string `json:"EmploymentSalaryTypeDescription,omitempty"`

	// EndDate: Salary record end date
	EndDate *types.Date `json:"EndDate,omitempty"`

	// ExternalRate: Rate Section: External rate
	ExternalRate *float64 `json:"ExternalRate,omitempty"`

	// Frequency: Frequency: 1 - Yearly, 2 - Quarterly, 3 - Monthly, 4 - 4-weekly, 5 - Weekly, 11 - Yearly (Pro forma), 12 - Quarterly (Pro forma), 13 - Monthly (Pro forma), 14 - 4-Weekly (Pro forma), 15 - Weekly (Pro forma)
	Frequency *int `json:"Frequency,omitempty"`

	// FrequencyDescription: Payroll period frequency description
	FrequencyDescription *string `json:"FrequencyDescription,omitempty"`

	// FulltimeAmount: Salary when working fulltime
	FulltimeAmount *float64 `json:"FulltimeAmount,omitempty"`

	// HourlyWage: Hourly wage
	HourlyWage *float64 `json:"HourlyWage,omitempty"`

	// IntercompanyRate: Rate Section: Intercompany rate
	IntercompanyRate *float64 `json:"IntercompanyRate,omitempty"`

	// InternalRate: Internal rate for time &amp; billing or professional service user
	InternalRate *float64 `json:"InternalRate,omitempty"`

	// JobLevel: Employee job level in context of a wage scale
	JobLevel *int `json:"JobLevel,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// ParttimeAmount: Salary when working parttime
	ParttimeAmount *float64 `json:"ParttimeAmount,omitempty"`

	// ParttimeFactor: Contract hours / Fulltime contract hours
	ParttimeFactor *float64 `json:"ParttimeFactor,omitempty"`

	// SalaryBasedType: Salary Section: Salary based on.Value: 0 - Manual entry, 1 - Wagescale, 2 - Minimum wage, 3 - Minimum hourly wage
	SalaryBasedType *int `json:"SalaryBasedType,omitempty"`

	// SalaryBasedTypeDescription: When SalaryBasedType value is 0, return &#39;Manual entry&#39;When SalaryBasedType value 1, return &#39;Wage scale&#39;When SalaryBasedType value 2, return &#39;Minimum wage&#39;When SalaryBasedType value 3, return &#39;Minimum hourly wage&#39;
	SalaryBasedTypeDescription *string `json:"SalaryBasedTypeDescription,omitempty"`

	// Scale: Employee wage scale
	Scale *string `json:"Scale,omitempty"`

	// Schedule: Employment schedule
	Schedule *types.GUID `json:"Schedule,omitempty"`

	// ScheduleCode: Employment schedule code
	ScheduleCode *string `json:"ScheduleCode,omitempty"`

	// ScheduleDescription: Description of employment schedule
	ScheduleDescription *string `json:"ScheduleDescription,omitempty"`

	// StartDate: Salary record start date
	StartDate *types.Date `json:"StartDate,omitempty"`

	// WageScale: Salary Section: Wagescale ID
	WageScale *types.GUID `json:"WageScale,omitempty"`

	// WageScalePeriod: Salary Section: Period for automatic step increase
	WageScalePeriod *int `json:"WageScalePeriod,omitempty"`

	// WageScaleStep: Salary Section: Wagescale Step Code
	WageScaleStep *string `json:"WageScaleStep,omitempty"`
}

func (e *EmploymentSalaries) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentSalariesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/EmploymentSalaries", method)
}

// List the EmploymentSalaries entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentSalariesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmploymentSalaries, error) {
	var entities []*EmploymentSalaries
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentSalaries", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmploymentSalaries entitiy in the provided division.
func (s *EmploymentSalariesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmploymentSalaries, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/EmploymentSalaries", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmploymentSalaries{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// EmployeesEndpoint is responsible for communicating with
// the Employees endpoint of the Payroll service.
type EmployeesEndpoint service

// Employees:
// Service: Payroll
// Entity: Employees
// URL: /api/v1/{division}/payroll/Employees
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollEmployees
type Employees struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// ActiveEmployment: Obsolete
	ActiveEmployment *byte `json:"ActiveEmployment,omitempty"`

	// AddressLine2: Second address line
	AddressLine2 *string `json:"AddressLine2,omitempty"`

	// AddressLine3: Third address line
	AddressLine3 *string `json:"AddressLine3,omitempty"`

	// AddressStreet: Street of address
	AddressStreet *string `json:"AddressStreet,omitempty"`

	// AddressStreetNumber: Street number of address
	AddressStreetNumber *string `json:"AddressStreetNumber,omitempty"`

	// AddressStreetNumberSuffix: Street number suffix of address
	AddressStreetNumberSuffix *string `json:"AddressStreetNumberSuffix,omitempty"`

	// BirthDate: Birth date
	BirthDate *types.Date `json:"BirthDate,omitempty"`

	// BirthName: Birth name
	BirthName *string `json:"BirthName,omitempty"`

	// BirthNamePrefix: Birth middle name
	BirthNamePrefix *string `json:"BirthNamePrefix,omitempty"`

	// BirthPlace: Birth place
	BirthPlace *string `json:"BirthPlace,omitempty"`

	// BusinessEmail: Email of the employee at the office
	BusinessEmail *string `json:"BusinessEmail,omitempty"`

	// BusinessFax: Fax number of the employee at the office
	BusinessFax *string `json:"BusinessFax,omitempty"`

	// BusinessMobile: Office mobile number of the employee
	BusinessMobile *string `json:"BusinessMobile,omitempty"`

	// BusinessPhone: Phone number of the employee at the office
	BusinessPhone *string `json:"BusinessPhone,omitempty"`

	// BusinessPhoneExtension: Phone extension of the employee at the office
	BusinessPhoneExtension *string `json:"BusinessPhoneExtension,omitempty"`

	// CASONumber: Obsolete
	CASONumber *string `json:"CASONumber,omitempty"`

	// City: City
	City *string `json:"City,omitempty"`

	// Code: Code of the employee
	Code *string `json:"Code,omitempty"`

	// Country: Country code
	Country *string `json:"Country,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Customer: Customer ID
	Customer *types.GUID `json:"Customer,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Email: Email address
	Email *string `json:"Email,omitempty"`

	// EmployeeHID: Employee number
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate: End date of the employee
	EndDate *types.Date `json:"EndDate,omitempty"`

	// FirstName: First name of the employee
	FirstName *string `json:"FirstName,omitempty"`

	// FullName: Full name of the employee
	FullName *string `json:"FullName,omitempty"`

	// Gender: Gender
	Gender *string `json:"Gender,omitempty"`

	// HID: Numeric ID of the employee
	HID *int `json:"HID,omitempty"`

	// Initials: Initials
	Initials *string `json:"Initials,omitempty"`

	// IsActive: IsActive
	IsActive *bool `json:"IsActive,omitempty"`

	// IsAnonymised: Indicates whether the employee is anonymised.
	IsAnonymised *byte `json:"IsAnonymised,omitempty"`

	// Language: Language code
	Language *string `json:"Language,omitempty"`

	// LastName: Last name
	LastName *string `json:"LastName,omitempty"`

	// LocationDescription: Description of the location of the employee (where am I?)
	LocationDescription *string `json:"LocationDescription,omitempty"`

	// Manager: Direct manager of the employee
	Manager *types.GUID `json:"Manager,omitempty"`

	// MaritalDate: Date of marriage
	MaritalDate *types.Date `json:"MaritalDate,omitempty"`

	// MaritalStatus: Marital status
	MaritalStatus *int `json:"MaritalStatus,omitempty"`

	// MiddleName: Middle name
	MiddleName *string `json:"MiddleName,omitempty"`

	// Mobile: Mobile phone
	Mobile *string `json:"Mobile,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Municipality: Municipality
	Municipality *string `json:"Municipality,omitempty"`

	// NameComposition:
	NameComposition *int `json:"NameComposition,omitempty"`

	// Nationality: Nationality
	Nationality *string `json:"Nationality,omitempty"`

	// NickName: Nick name
	NickName *string `json:"NickName,omitempty"`

	// Notes: Additional notes
	Notes *string `json:"Notes,omitempty"`

	// PartnerName: Name of partner
	PartnerName *string `json:"PartnerName,omitempty"`

	// PartnerNamePrefix: Middle name of partner
	PartnerNamePrefix *string `json:"PartnerNamePrefix,omitempty"`

	// Person: Reference to the persons table in which the personal data of the employee is stored
	Person *types.GUID `json:"Person,omitempty"`

	// Phone: Phone number
	Phone *string `json:"Phone,omitempty"`

	// PhoneExtension: Phone number extension
	PhoneExtension *string `json:"PhoneExtension,omitempty"`

	// PictureFileName: Filename of picture
	PictureFileName *string `json:"PictureFileName,omitempty"`

	// PictureUrl: Url of picture
	PictureUrl *string `json:"PictureUrl,omitempty"`

	// Postcode: Postcode
	Postcode *string `json:"Postcode,omitempty"`

	// PrivateEmail: Private email address
	PrivateEmail *string `json:"PrivateEmail,omitempty"`

	// SocialSecurityNumber: Social security number
	SocialSecurityNumber *string `json:"SocialSecurityNumber,omitempty"`

	// StartDate: Start date of the employee
	StartDate *types.Date `json:"StartDate,omitempty"`

	// State: State
	State *string `json:"State,omitempty"`

	// Title: Title
	Title *string `json:"Title,omitempty"`

	// User: User ID of employee
	User *types.GUID `json:"User,omitempty"`

	// UserFullName: Name of user
	UserFullName *string `json:"UserFullName,omitempty"`
}

func (e *Employees) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmployeesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/Employees", method)
}

// List the Employees entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmployeesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*Employees, error) {
	var entities []*Employees
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/Employees", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the Employees entitiy in the provided division.
func (s *EmployeesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*Employees, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/Employees", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &Employees{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

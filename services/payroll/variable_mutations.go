// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package payroll

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// VariableMutationsEndpoint is responsible for communicating with
// the VariableMutations endpoint of the Payroll service.
type VariableMutationsEndpoint service

// VariableMutations:
// Service: Payroll
// Entity: VariableMutations
// URL: /api/v1/{division}/payroll/VariableMutations
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=PayrollVariableMutations
type VariableMutations struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Description: Description for the payroll component entry
	Description *string `json:"Description,omitempty"`

	// EmployeeHID: Numeric number of Employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EmployeeID: Employee ID
	EmployeeID *types.GUID `json:"EmployeeID,omitempty"`

	// EntryFieldType: Entry field types: 1 = Quantity, 2 = Amount, 3 = Percentage
	EntryFieldType *int `json:"EntryFieldType,omitempty"`

	// Notes: Notes for the payroll component entry
	Notes *string `json:"Notes,omitempty"`

	// PayrollComponent: Payroll component code
	PayrollComponent *string `json:"PayrollComponent,omitempty"`

	// PayrollComponentID: Payroll component ID
	PayrollComponentID *types.GUID `json:"PayrollComponentID,omitempty"`

	// PayrollPeriod: Payroll period
	PayrollPeriod *int `json:"PayrollPeriod,omitempty"`

	// PayrollYear: Payroll year
	PayrollYear *int `json:"PayrollYear,omitempty"`

	// Type: Type of the entry:1 = Days worked, 2 = Hours worked, 3 = Days ill, 4 = Hours ill, 5 = Days leave, 6 = Hours leave, 7 = Payroll component, 8 = Days care leave, 9 = Hours care leave, 10 = Days extended partner leave, 11 = Hours extended partner leave, 12 = Days Unpaid Leave, 13 = Hours Unpaid Leave, 14 = Days Paid Parental Leave, 15 = Hours Paid Parental Leave
	Type *int `json:"Type,omitempty"`

	// Value: Value of the entry
	Value *float64 `json:"Value,omitempty"`
}

func (e *VariableMutations) GetPrimary() *types.GUID {
	return e.ID
}

func (s *VariableMutationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "payroll/VariableMutations", method)
}

// List the VariableMutations entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *VariableMutationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*VariableMutations, error) {
	var entities []*VariableMutations
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/VariableMutations", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the VariableMutations entitiy in the provided division.
func (s *VariableMutationsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*VariableMutations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/VariableMutations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &VariableMutations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty VariableMutations entity
func (s *VariableMutationsEndpoint) New() *VariableMutations {
	return &VariableMutations{}
}

// Create the VariableMutations entity in the provided division.
func (s *VariableMutationsEndpoint) Create(ctx context.Context, division int, entity *VariableMutations) (*VariableMutations, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/VariableMutations", division) // #nosec
	e := &VariableMutations{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the VariableMutations entity in the provided division.
func (s *VariableMutationsEndpoint) Update(ctx context.Context, division int, entity *VariableMutations) (*VariableMutations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/payroll/VariableMutations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &VariableMutations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// EmployeeRestrictionItemsEndpoint is responsible for communicating with
// the EmployeeRestrictionItems endpoint of the Project service.
type EmployeeRestrictionItemsEndpoint service

// EmployeeRestrictionItems:
// Service: Project
// Entity: EmployeeRestrictionItems
// URL: /api/v1/{division}/project/EmployeeRestrictionItems
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectEmployeeRestrictionItems
type EmployeeRestrictionItems struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Date and time when the employee restriction was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: ID of user that created the employee restriction
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Full name of user that created the employee restriction
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division of employee restriction
	Division *int `json:"Division,omitempty"`

	// Employee: ID of the employee that linked to the employee restriction
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Full name in string of the employee
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Employee HID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Item: ID of item that linked to the employee restriction
	Item *types.GUID `json:"Item,omitempty"`

	// ItemCode: Code of item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemIsTime: Indicates if the item is a time unit item
	ItemIsTime *byte `json:"ItemIsTime,omitempty"`

	// Modified: Last date when the employee restriction was modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: ID of user that modified the employee restriction
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Full name of user that modified the employee restriction
	ModifierFullName *string `json:"ModifierFullName,omitempty"`
}

func (e *EmployeeRestrictionItems) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmployeeRestrictionItemsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/EmployeeRestrictionItems", method)
}

// List the EmployeeRestrictionItems entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmployeeRestrictionItemsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmployeeRestrictionItems, error) {
	var entities []*EmployeeRestrictionItems
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmployeeRestrictionItems", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmployeeRestrictionItems entitiy in the provided division.
func (s *EmployeeRestrictionItemsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmployeeRestrictionItems, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmployeeRestrictionItems", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmployeeRestrictionItems{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty EmployeeRestrictionItems entity
func (s *EmployeeRestrictionItemsEndpoint) New() *EmployeeRestrictionItems {
	return &EmployeeRestrictionItems{}
}

// Create the EmployeeRestrictionItems entity in the provided division.
func (s *EmployeeRestrictionItemsEndpoint) Create(ctx context.Context, division int, entity *EmployeeRestrictionItems) (*EmployeeRestrictionItems, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmployeeRestrictionItems", division) // #nosec
	e := &EmployeeRestrictionItems{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the EmployeeRestrictionItems entity in the provided division.
func (s *EmployeeRestrictionItemsEndpoint) Update(ctx context.Context, division int, entity *EmployeeRestrictionItems) (*EmployeeRestrictionItems, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmployeeRestrictionItems", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &EmployeeRestrictionItems{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the EmployeeRestrictionItems entity in the provided division.
func (s *EmployeeRestrictionItemsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmployeeRestrictionItems", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

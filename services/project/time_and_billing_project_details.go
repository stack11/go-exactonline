// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// TimeAndBillingProjectDetailsEndpoint is responsible for communicating with
// the TimeAndBillingProjectDetails endpoint of the Project service.
type TimeAndBillingProjectDetailsEndpoint service

// TimeAndBillingProjectDetails:
// Service: Project
// Entity: TimeAndBillingProjectDetails
// URL: /api/v1/{division}/read/project/TimeAndBillingProjectDetails
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectTimeAndBillingProjectDetails
type TimeAndBillingProjectDetails struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: The ID of the account that the project is linked to
	Account *types.GUID `json:"Account,omitempty"`

	// AccountName: The name of the account that the project is linked to
	AccountName *string `json:"AccountName,omitempty"`

	// Code: The code of the account that the project is linked to
	Code *string `json:"Code,omitempty"`

	// Description: The description of the account that project is linked to
	Description *string `json:"Description,omitempty"`

	// Type: The project type. E.g: 1 = Campaign, 2 = Fixed Price, 3 = Time and Material, 4 = Non Billable, 5 = Prepaid
	Type *int `json:"Type,omitempty"`
}

func (e *TimeAndBillingProjectDetails) GetPrimary() *types.GUID {
	return e.ID
}

func (s *TimeAndBillingProjectDetailsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/TimeAndBillingProjectDetails", method)
}

// List the TimeAndBillingProjectDetails entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *TimeAndBillingProjectDetailsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*TimeAndBillingProjectDetails, error) {
	var entities []*TimeAndBillingProjectDetails
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingProjectDetails", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the TimeAndBillingProjectDetails entitiy in the provided division.
func (s *TimeAndBillingProjectDetailsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*TimeAndBillingProjectDetails, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingProjectDetails", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &TimeAndBillingProjectDetails{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// RecentCostsEndpoint is responsible for communicating with
// the RecentCosts endpoint of the Project service.
type RecentCostsEndpoint service

// RecentCosts:
// Service: Project
// Entity: RecentCosts
// URL: /api/v1/{division}/read/project/RecentCosts
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectRecentCosts
type RecentCosts struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// Id: Primary key
	Id *int `json:"Id,omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountId: Reference to Account
	AccountId *types.GUID `json:"AccountId,omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:"AccountName,omitempty"`

	// AmountApproved: Amount approved
	AmountApproved *float64 `json:"AmountApproved,omitempty"`

	// AmountDraft: Amount draft
	AmountDraft *float64 `json:"AmountDraft,omitempty"`

	// AmountRejected: Amount rejected
	AmountRejected *float64 `json:"AmountRejected,omitempty"`

	// AmountSubmitted: Amount submitted
	AmountSubmitted *float64 `json:"AmountSubmitted,omitempty"`

	// CurrencyCode: Code of Currency
	CurrencyCode *string `json:"CurrencyCode,omitempty"`

	// Date: Date
	Date *types.Date `json:"Date,omitempty"`

	// EntryId: Entry ID
	EntryId *types.GUID `json:"EntryId,omitempty"`

	// Expense: Reference to Expense
	Expense *types.GUID `json:"Expense,omitempty"`

	// ExpenseDescription: Description of Expense
	ExpenseDescription *string `json:"ExpenseDescription,omitempty"`

	// ItemCode: Code of Item
	ItemCode *string `json:"ItemCode,omitempty"`

	// ItemDescription: Description of Item
	ItemDescription *string `json:"ItemDescription,omitempty"`

	// ItemId: Reference to Item
	ItemId *types.GUID `json:"ItemId,omitempty"`

	// Notes: Remarks
	Notes *string `json:"Notes,omitempty"`

	// ProjectCode: Code of Project
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Description of Project
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectId: Reference to Project
	ProjectId *types.GUID `json:"ProjectId,omitempty"`

	// QuantityApproved: Quantity approved
	QuantityApproved *float64 `json:"QuantityApproved,omitempty"`

	// QuantityDraft: Quantity draft
	QuantityDraft *float64 `json:"QuantityDraft,omitempty"`

	// QuantityRejected: Quantity rejected
	QuantityRejected *float64 `json:"QuantityRejected,omitempty"`

	// QuantitySubmitted: Quantity submitted
	QuantitySubmitted *float64 `json:"QuantitySubmitted,omitempty"`

	// WeekNumber: Week number
	WeekNumber *int `json:"WeekNumber,omitempty"`
}

func (e *RecentCosts) GetPrimary() *int {
	return e.Id
}

func (s *RecentCostsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/RecentCosts", method)
}

// List the RecentCosts entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *RecentCostsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*RecentCosts, error) {
	var entities []*RecentCosts
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/RecentCosts", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the RecentCosts entitiy in the provided division.
func (s *RecentCostsEndpoint) Get(ctx context.Context, division int, id *int) (*RecentCosts, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/RecentCosts", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &RecentCosts{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// TimeAndBillingEntryRecentActivitiesAndExpensesEndpoint is responsible for communicating with
// the TimeAndBillingEntryRecentActivitiesAndExpenses endpoint of the Project service.
type TimeAndBillingEntryRecentActivitiesAndExpensesEndpoint service

// TimeAndBillingEntryRecentActivitiesAndExpenses:
// Service: Project
// Entity: TimeAndBillingEntryRecentActivitiesAndExpenses
// URL: /api/v1/{division}/read/project/TimeAndBillingEntryRecentActivitiesAndExpenses
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ReadProjectTimeAndBillingEntryRecentActivitiesAndExpenses
type TimeAndBillingEntryRecentActivitiesAndExpenses struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// DateLastUsed: Date last used
	DateLastUsed *types.Date `json:"DateLastUsed,omitempty"`

	// DefaultItem: ID of the defaultItem
	DefaultItem *types.GUID `json:"DefaultItem,omitempty"`

	// DefaultItemCode: Item code of the defaultItem
	DefaultItemCode *string `json:"DefaultItemCode,omitempty"`

	// DefaultItemDescription: Description of the defaultItem
	DefaultItemDescription *string `json:"DefaultItemDescription,omitempty"`

	// Description: Description
	Description *string `json:"Description,omitempty"`

	// ParentDescription: Description of Parent
	ParentDescription *string `json:"ParentDescription,omitempty"`
}

func (e *TimeAndBillingEntryRecentActivitiesAndExpenses) GetPrimary() *types.GUID {
	return e.ID
}

func (s *TimeAndBillingEntryRecentActivitiesAndExpensesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/TimeAndBillingEntryRecentActivitiesAndExpenses", method)
}

// List the TimeAndBillingEntryRecentActivitiesAndExpenses entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *TimeAndBillingEntryRecentActivitiesAndExpensesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*TimeAndBillingEntryRecentActivitiesAndExpenses, error) {
	var entities []*TimeAndBillingEntryRecentActivitiesAndExpenses
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingEntryRecentActivitiesAndExpenses", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the TimeAndBillingEntryRecentActivitiesAndExpenses entitiy in the provided division.
func (s *TimeAndBillingEntryRecentActivitiesAndExpensesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*TimeAndBillingEntryRecentActivitiesAndExpenses, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/read/project/TimeAndBillingEntryRecentActivitiesAndExpenses", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &TimeAndBillingEntryRecentActivitiesAndExpenses{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

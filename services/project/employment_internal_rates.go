// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// EmploymentInternalRatesEndpoint is responsible for communicating with
// the EmploymentInternalRates endpoint of the Project service.
type EmploymentInternalRatesEndpoint service

// EmploymentInternalRates:
// Service: Project
// Entity: EmploymentInternalRates
// URL: /api/v1/{division}/project/EmploymentInternalRates
// HasWebhook: false
// IsInBeta: false
// Methods: GET
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectEmploymentInternalRates
type EmploymentInternalRates struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: ID of internal rate
	ID *types.GUID `json:"ID,omitempty"`

	// Created: Date and time when the internal rates was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: ID of user that created the internal rate
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Full name of user that created the record
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: ID of employee that linked to the internal rate
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeFullName: Name of employee that linked to the internal rate
	EmployeeFullName *string `json:"EmployeeFullName,omitempty"`

	// EmployeeHID: Employee number that linked to the internal rate
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// Employment: ID of employment that linked to the internal rate
	Employment *types.GUID `json:"Employment,omitempty"`

	// EmploymentHID: Employement number that linked to the internal rate
	EmploymentHID *int `json:"EmploymentHID,omitempty"`

	// EndDate: End date of internal rate
	EndDate *types.Date `json:"EndDate,omitempty"`

	// IntercompanyRate: Amount of intercompany rate
	IntercompanyRate *float64 `json:"IntercompanyRate,omitempty"`

	// InternalRate: Amount of internal rate
	InternalRate *float64 `json:"InternalRate,omitempty"`

	// Modified: Last modified date of internal rate
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: ID of user that modified the internal rate
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Full name of user that modified the internal rate
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// StartDate: Start date of internal rate
	StartDate *types.Date `json:"StartDate,omitempty"`
}

func (e *EmploymentInternalRates) GetPrimary() *types.GUID {
	return e.ID
}

func (s *EmploymentInternalRatesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/EmploymentInternalRates", method)
}

// List the EmploymentInternalRates entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *EmploymentInternalRatesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*EmploymentInternalRates, error) {
	var entities []*EmploymentInternalRates
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmploymentInternalRates", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the EmploymentInternalRates entitiy in the provided division.
func (s *EmploymentInternalRatesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*EmploymentInternalRates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/EmploymentInternalRates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &EmploymentInternalRates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

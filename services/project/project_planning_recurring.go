// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectPlanningRecurringEndpoint is responsible for communicating with
// the ProjectPlanningRecurring endpoint of the Project service.
type ProjectPlanningRecurringEndpoint service

// ProjectPlanningRecurring:
// Service: Project
// Entity: ProjectPlanningRecurring
// URL: /api/v1/{division}/project/ProjectPlanningRecurring
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectPlanningRecurring
type ProjectPlanningRecurring struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Account linked to the recurring planning
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Code of Account
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Name of Account
	AccountName *string `json:"AccountName,omitempty"`

	// BGTStatus: Status of the project planning process, 1 = To be processed, 2 = Processed, 3 = Failed
	BGTStatus *int `json:"BGTStatus,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// DayOrThe: Indicates whether the recurring planning is day of the month or weekday of the month
	DayOrThe *int `json:"DayOrThe,omitempty"`

	// Description: Description of recurring planning
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Employee: Employee linked to the recurring planning
	Employee *types.GUID `json:"Employee,omitempty"`

	// EmployeeCode: Code of employee
	EmployeeCode *string `json:"EmployeeCode,omitempty"`

	// EmployeeHID: Numeric ID of the employee
	EmployeeHID *int `json:"EmployeeHID,omitempty"`

	// EndDate: End date of the recurring planning
	EndDate *types.Date `json:"EndDate,omitempty"`

	// EndDateOrAfter: Indicates whether the recurring planning is end on end date or end after number of times
	EndDateOrAfter *int `json:"EndDateOrAfter,omitempty"`

	// EndTime: End time for the recurring planning to be active
	EndTime *types.Date `json:"EndTime,omitempty"`

	// Hours: Number of hours for the recurring planning
	Hours *float64 `json:"Hours,omitempty"`

	// HourType: Hour type of the recurring planning, item with &#39;Time&#39; type
	HourType *types.GUID `json:"HourType,omitempty"`

	// HourTypeCode: Code of the hour type
	HourTypeCode *string `json:"HourTypeCode,omitempty"`

	// HourTypeDescription: Description of the hour type
	HourTypeDescription *string `json:"HourTypeDescription,omitempty"`

	// Modified: Date modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: Modifier user ID
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Modifier name
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// MonthPatternDay: Day of the monthly recurring
	MonthPatternDay *byte `json:"MonthPatternDay,omitempty"`

	// MonthPatternOrdinalDay: Ordinal number of week day for the monthly recurring planning, 1 = first, 2 = second, 3 = third, 4 = fourth, 31 = last
	MonthPatternOrdinalDay *byte `json:"MonthPatternOrdinalDay,omitempty"`

	// MonthPatternOrdinalWeek: Ordinal week day of the monthly recurring planning, 1 = Monday, 2 = Tuesday, 3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday, 7 = Sunday
	MonthPatternOrdinalWeek *byte `json:"MonthPatternOrdinalWeek,omitempty"`

	// Notes: For additional information about recurring planning
	Notes *string `json:"Notes,omitempty"`

	// NumberOfRecurrences: Number of times the planning recurs
	NumberOfRecurrences *int `json:"NumberOfRecurrences,omitempty"`

	// OverAllocate: Indicates whether the entries can have over allocated planning hours
	OverAllocate *bool `json:"OverAllocate,omitempty"`

	// PatternFrequency: Number of planning times for weekly or monthly recurring planning
	PatternFrequency *byte `json:"PatternFrequency,omitempty"`

	// Project: Project linked to the recurring planning
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Code of project
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Description of project
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// ProjectPlanningRecurringType: Type of the recurring planning, 1 = weekly, 2 = monthly
	ProjectPlanningRecurringType *byte `json:"ProjectPlanningRecurringType,omitempty"`

	// ProjectWBS: WBS linked to the recurring planning
	ProjectWBS *types.GUID `json:"ProjectWBS,omitempty"`

	// ProjectWBSDescription: Description of WBS
	ProjectWBSDescription *string `json:"ProjectWBSDescription,omitempty"`

	// StartDate: Start date of the recurring planning
	StartDate *types.Date `json:"StartDate,omitempty"`

	// StartTime: Start time for the recurring planning to be active
	StartTime *types.Date `json:"StartTime,omitempty"`

	// Status: Status of the project planning, 1 = Reserved, 2 = Planned
	Status *int `json:"Status,omitempty"`

	// WeekPatternDay: Week day for the weekly recurring planning
	WeekPatternDay *byte `json:"WeekPatternDay,omitempty"`

	// WeekPatternFriday: Create planning on Friday, apply to weekly pattern recurring planning only
	WeekPatternFriday *bool `json:"WeekPatternFriday,omitempty"`

	// WeekPatternMonday: Create planning on Monday, apply to weekly pattern recurring planning only
	WeekPatternMonday *bool `json:"WeekPatternMonday,omitempty"`

	// WeekPatternSaturday: Create planning on Saturday, apply to weekly pattern recurring planning only
	WeekPatternSaturday *bool `json:"WeekPatternSaturday,omitempty"`

	// WeekPatternSunday: Create planning on Sunday, apply to weekly pattern recurring planning only
	WeekPatternSunday *bool `json:"WeekPatternSunday,omitempty"`

	// WeekPatternThursday: Create planning on Thursday, apply to weekly pattern recurring planning only
	WeekPatternThursday *bool `json:"WeekPatternThursday,omitempty"`

	// WeekPatternTuesday: Create planning on Tuesday, apply to weekly pattern recurring planning only
	WeekPatternTuesday *bool `json:"WeekPatternTuesday,omitempty"`

	// WeekPatternWednesday: Create planning on Wednesday, apply to weekly pattern recurring planning only
	WeekPatternWednesday *bool `json:"WeekPatternWednesday,omitempty"`
}

func (e *ProjectPlanningRecurring) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectPlanningRecurringEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/ProjectPlanningRecurring", method)
}

// List the ProjectPlanningRecurring entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectPlanningRecurringEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectPlanningRecurring, error) {
	var entities []*ProjectPlanningRecurring
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectPlanningRecurring entitiy in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ProjectPlanningRecurring, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectPlanningRecurring{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ProjectPlanningRecurring entity
func (s *ProjectPlanningRecurringEndpoint) New() *ProjectPlanningRecurring {
	return &ProjectPlanningRecurring{}
}

// Create the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Create(ctx context.Context, division int, entity *ProjectPlanningRecurring) (*ProjectPlanningRecurring, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	e := &ProjectPlanningRecurring{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Update(ctx context.Context, division int, entity *ProjectPlanningRecurring) (*ProjectPlanningRecurring, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ProjectPlanningRecurring{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the ProjectPlanningRecurring entity in the provided division.
func (s *ProjectPlanningRecurringEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectPlanningRecurring", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

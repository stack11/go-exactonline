// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package project

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ProjectAccountMutationsEndpoint is responsible for communicating with
// the ProjectAccountMutations endpoint of the Project service.
type ProjectAccountMutationsEndpoint service

// ProjectAccountMutations:
// Service: Project
// Entity: ProjectAccountMutations
// URL: /api/v1/{division}/project/ProjectAccountMutations
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ProjectProjectAccountMutations
type ProjectAccountMutations struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: The account that is involved in project account mutation
	Account *types.GUID `json:"Account,omitempty"`

	// AccountCode: Account code that is involved in project account mutation
	AccountCode *string `json:"AccountCode,omitempty"`

	// AccountName: Name of Account that is involved in project account mutation
	AccountName *string `json:"AccountName,omitempty"`

	// Created: The date and time when the project account mutation was created
	Created *types.Date `json:"Created,omitempty"`

	// Creator: The guid ID of the user that created the project account mutation
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: The full name of the user that created the project account mutation
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Division: The division of the project and account mutation
	Division *int `json:"Division,omitempty"`

	// DivisionName: Name of Division
	DivisionName *string `json:"DivisionName,omitempty"`

	// EndDate: End date of the project account mutation
	EndDate *types.Date `json:"EndDate,omitempty"`

	// Modified: The date when the project account mutation was modified
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: The guid ID of the user that modified the project account mutation
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: The full name of the user that modified the project account mutation
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Notes: For additional information about project account mutations
	Notes *string `json:"Notes,omitempty"`

	// Project: The project that is involved in project account mutation
	Project *types.GUID `json:"Project,omitempty"`

	// ProjectCode: Project code that is involved in project account mutation
	ProjectCode *string `json:"ProjectCode,omitempty"`

	// ProjectDescription: Project description that is involved in project account mutation
	ProjectDescription *string `json:"ProjectDescription,omitempty"`

	// StartDate: Start date of a project account mutation
	StartDate *types.Date `json:"StartDate,omitempty"`
}

func (e *ProjectAccountMutations) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ProjectAccountMutationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "project/ProjectAccountMutations", method)
}

// List the ProjectAccountMutations entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ProjectAccountMutationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ProjectAccountMutations, error) {
	var entities []*ProjectAccountMutations
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectAccountMutations", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ProjectAccountMutations entitiy in the provided division.
func (s *ProjectAccountMutationsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ProjectAccountMutations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectAccountMutations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ProjectAccountMutations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty ProjectAccountMutations entity
func (s *ProjectAccountMutationsEndpoint) New() *ProjectAccountMutations {
	return &ProjectAccountMutations{}
}

// Create the ProjectAccountMutations entity in the provided division.
func (s *ProjectAccountMutationsEndpoint) Create(ctx context.Context, division int, entity *ProjectAccountMutations) (*ProjectAccountMutations, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectAccountMutations", division) // #nosec
	e := &ProjectAccountMutations{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the ProjectAccountMutations entity in the provided division.
func (s *ProjectAccountMutationsEndpoint) Update(ctx context.Context, division int, entity *ProjectAccountMutations) (*ProjectAccountMutations, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectAccountMutations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ProjectAccountMutations{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the ProjectAccountMutations entity in the provided division.
func (s *ProjectAccountMutationsEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/project/ProjectAccountMutations", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

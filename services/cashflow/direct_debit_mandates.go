// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package cashflow

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// DirectDebitMandatesEndpoint is responsible for communicating with
// the DirectDebitMandates endpoint of the Cashflow service.
type DirectDebitMandatesEndpoint service

// DirectDebitMandates:
// Service: Cashflow
// Entity: DirectDebitMandates
// URL: /api/v1/{division}/cashflow/DirectDebitMandates
// HasWebhook: false
// IsInBeta: false
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CashflowDirectDebitMandates
type DirectDebitMandates struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Account: Account to which the mandate belongs.
	Account *types.GUID `json:"Account,omitempty"`

	// BankAccount: Bank account to which the mandate belongs.
	BankAccount *types.GUID `json:"BankAccount,omitempty"`

	// CancellationDate: Date that the mandate is cancelled. Used to check the validity of the mandate.
	CancellationDate *types.Date `json:"CancellationDate,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Displays the description of the mandate.
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// FirstSend: Indicates the first collection hasn&#39;t been sent/confirmed with this mandate.
	FirstSend *byte `json:"FirstSend,omitempty"`

	// Main: Indicates if the mandate is the main, you can have only one main mandate
	Main *byte `json:"Main,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// PaymentType: Depending on the payment type, a different bank file will be generated. 0 = One-off payment, 1 = Recurrent payment, 2 = AdHoc (UK only)
	PaymentType *int `json:"PaymentType,omitempty"`

	// Reference: Displays a reference number for the mandate. It is a unique reference number that you can assign to each mandate.
	Reference *string `json:"Reference,omitempty"`

	// SignatureDate: Date that the mandate is signed. The collection must take place after the signature date of the mandate. The date is used to check the validity of the mandate.
	SignatureDate *types.Date `json:"SignatureDate,omitempty"`

	// Type: Depending on the type, a different bank file will be generated. 0 = Core, 1 = B2B and 2 = bottomline (UK only)
	Type *int `json:"Type,omitempty"`
}

func (e *DirectDebitMandates) GetPrimary() *types.GUID {
	return e.ID
}

func (s *DirectDebitMandatesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "cashflow/DirectDebitMandates", method)
}

// List the DirectDebitMandates entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *DirectDebitMandatesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*DirectDebitMandates, error) {
	var entities []*DirectDebitMandates
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/DirectDebitMandates", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the DirectDebitMandates entitiy in the provided division.
func (s *DirectDebitMandatesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*DirectDebitMandates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/DirectDebitMandates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &DirectDebitMandates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty DirectDebitMandates entity
func (s *DirectDebitMandatesEndpoint) New() *DirectDebitMandates {
	return &DirectDebitMandates{}
}

// Create the DirectDebitMandates entity in the provided division.
func (s *DirectDebitMandatesEndpoint) Create(ctx context.Context, division int, entity *DirectDebitMandates) (*DirectDebitMandates, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/DirectDebitMandates", division) // #nosec
	e := &DirectDebitMandates{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the DirectDebitMandates entity in the provided division.
func (s *DirectDebitMandatesEndpoint) Update(ctx context.Context, division int, entity *DirectDebitMandates) (*DirectDebitMandates, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/DirectDebitMandates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &DirectDebitMandates{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the DirectDebitMandates entity in the provided division.
func (s *DirectDebitMandatesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/DirectDebitMandates", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}

// Copyright 2018 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package cashflow

import (
	"context"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// ImportNotificationsEndpoint is responsible for communicating with
// the ImportNotifications endpoint of the Cashflow service.
type ImportNotificationsEndpoint service

// ImportNotifications:
// Service: Cashflow
// Entity: ImportNotifications
// URL: /api/v1/{division}/cashflow/ImportNotifications
// HasWebhook: false
// IsInBeta: false
// Methods: GET PUT
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=CashflowImportNotifications
type ImportNotifications struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// BankAccount: Number of the bank account related to the notification.
	BankAccount *string `json:"BankAccount,omitempty"`

	// BankAccountID: ID of the bank account related to the notification.
	BankAccountID *types.GUID `json:"BankAccountID,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// Document: ID of the document related to the notification.
	Document *types.GUID `json:"Document,omitempty"`

	// Result: Code of the import result
	Result *int `json:"Result,omitempty"`

	// ResultDescription: Description of the import result
	ResultDescription *string `json:"ResultDescription,omitempty"`

	// RetriedBy: ID of the user that requested a retry of the import.
	RetriedBy *types.GUID `json:"RetriedBy,omitempty"`

	// RetriedOn: Date when the retry was requested.
	RetriedOn *types.Date `json:"RetriedOn,omitempty"`
}

func (e *ImportNotifications) GetPrimary() *types.GUID {
	return e.ID
}

func (s *ImportNotificationsEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "cashflow/ImportNotifications", method)
}

// List the ImportNotifications entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *ImportNotificationsEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*ImportNotifications, error) {
	var entities []*ImportNotifications
	u, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/ImportNotifications", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the ImportNotifications entitiy in the provided division.
func (s *ImportNotificationsEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*ImportNotifications, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/ImportNotifications", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &ImportNotifications{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// Update the ImportNotifications entity in the provided division.
func (s *ImportNotificationsEndpoint) Update(ctx context.Context, division int, entity *ImportNotifications) (*ImportNotifications, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/{division}/cashflow/ImportNotifications", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &ImportNotifications{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

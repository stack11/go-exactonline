// Copyright 2022 The go-exactonline AUTHORS. All rights reserved.
//
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.
// Code generated by gen-services.go; DO NOT EDIT.
package continuousmonitoring

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/stack11/go-exactonline/api"
	"github.com/stack11/go-exactonline/types"
)

// IndicatorBalancesEndpoint is responsible for communicating with
// the IndicatorBalances endpoint of the ContinuousMonitoring service.
type IndicatorBalancesEndpoint service

// IndicatorBalances:
// Service: ContinuousMonitoring
// Entity: IndicatorBalances
// URL: /api/v1/beta/{division}/continuousmonitoring/IndicatorBalances
// HasWebhook: false
// IsInBeta: true
// Methods: GET POST PUT DELETE
// Endpoint docs: https://start.exactonline.nl/docs/HlpRestAPIResourcesDetails.aspx?name=ContinuousMonitoringIndicatorBalances
type IndicatorBalances struct {
	MetaData *api.MetaData `json:"__metadata,omitempty"`
	// ID: Primary key
	ID *types.GUID `json:"ID,omitempty"`

	// Active: Indicates if this indicator is active or inactive
	Active *byte `json:"Active,omitempty"`

	// Classification: Indicator classification (1 = Quality, 2 = Advice). Default = 1
	Classification *int `json:"Classification,omitempty"`

	// Created: Creation date
	Created *types.Date `json:"Created,omitempty"`

	// CreateSignal: Indicates whether a signal is created
	CreateSignal *byte `json:"CreateSignal,omitempty"`

	// Creator: User ID of creator
	Creator *types.GUID `json:"Creator,omitempty"`

	// CreatorFullName: Name of creator
	CreatorFullName *string `json:"CreatorFullName,omitempty"`

	// Description: Description of indicator
	Description *string `json:"Description,omitempty"`

	// Division: Division code
	Division *int `json:"Division,omitempty"`

	// ExternalCode: External code
	ExternalCode *string `json:"ExternalCode,omitempty"`

	// IndicatorGLAccounts: Collection of GL accounts
	IndicatorGLAccounts *json.RawMessage `json:"IndicatorGLAccounts,omitempty"`

	// Modified: Last modified date
	Modified *types.Date `json:"Modified,omitempty"`

	// Modifier: User ID of modifier
	Modifier *types.GUID `json:"Modifier,omitempty"`

	// ModifierFullName: Name of modifier
	ModifierFullName *string `json:"ModifierFullName,omitempty"`

	// Operator: Operator to be used in conjunction with journal (1 = Equal to, 2 = Unequal to, 3 = Greater than, 4 = Greater than or equal to, 5 = Less than, 6 = Less than or equal to, 7 = Between)
	Operator *int `json:"Operator,omitempty"`

	// Severity: Severity of the indicators (1 = Low, 2 = Medium, 3 = High, 4 = Critical)
	Severity *int `json:"Severity,omitempty"`

	// Type: Indicator type (1 = Balance G/L account per financial year, 2 = Usage of journals, 3 = Deviating amount entered, 4 = Liquidity, 5 = VAT Return deadline, 6 = Difference result in percentage, 7 = Different VAT code used)
	Type *int `json:"Type,omitempty"`

	// ValueFrom: Value from/Value. Default value is 0. This field should be used together with any choice of operator.
	ValueFrom *float64 `json:"ValueFrom,omitempty"`

	// ValueTo: Value to. Default value is 0.
	ValueTo *float64 `json:"ValueTo,omitempty"`
}

func (e *IndicatorBalances) GetPrimary() *types.GUID {
	return e.ID
}

func (s *IndicatorBalancesEndpoint) UserHasRights(ctx context.Context, division int, method string) (bool, error) {
	return s.client.UserHasRights(ctx, division, "continuousmonitoring/IndicatorBalances", method)
}

// List the IndicatorBalances entities in the provided division.
// If all is true, all the paginated results are fetched; if false, list the first page.
func (s *IndicatorBalancesEndpoint) List(ctx context.Context, division int, all bool, o *api.ListOptions) ([]*IndicatorBalances, error) {
	var entities []*IndicatorBalances
	u, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorBalances", division) // #nosec
	api.AddListOptionsToURL(u, o)

	if all {
		err := s.client.ListRequestAndDoAll(ctx, u.String(), &entities)
		return entities, err
	}
	_, _, err := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, &entities)
	return entities, err
}

// Get the IndicatorBalances entitiy in the provided division.
func (s *IndicatorBalancesEndpoint) Get(ctx context.Context, division int, id *types.GUID) (*IndicatorBalances, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorBalances", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return nil, err
	}

	e := &IndicatorBalances{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "GET", u.String(), nil, e)
	return e, requestError
}

// New returns an empty IndicatorBalances entity
func (s *IndicatorBalancesEndpoint) New() *IndicatorBalances {
	return &IndicatorBalances{}
}

// Create the IndicatorBalances entity in the provided division.
func (s *IndicatorBalancesEndpoint) Create(ctx context.Context, division int, entity *IndicatorBalances) (*IndicatorBalances, error) {
	u, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorBalances", division) // #nosec
	e := &IndicatorBalances{}
	_, _, err := s.client.NewRequestAndDo(ctx, "POST", u.String(), entity, e)
	if err != nil {
		return nil, err
	}
	return e, nil
}

// Update the IndicatorBalances entity in the provided division.
func (s *IndicatorBalancesEndpoint) Update(ctx context.Context, division int, entity *IndicatorBalances) (*IndicatorBalances, error) {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorBalances", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, entity.GetPrimary())
	if err != nil {
		return nil, err
	}

	e := &IndicatorBalances{}
	_, _, requestError := s.client.NewRequestAndDo(ctx, "PUT", u.String(), entity, e)
	return e, requestError
}

// Delete the IndicatorBalances entity in the provided division.
func (s *IndicatorBalancesEndpoint) Delete(ctx context.Context, division int, id *types.GUID) error {
	b, _ := s.client.ResolvePathWithDivision("/api/v1/beta/{division}/continuousmonitoring/IndicatorBalances", division) // #nosec
	u, err := api.AddOdataKeyToURL(b, id)
	if err != nil {
		return err
	}

	_, r, requestError := s.client.NewRequestAndDo(ctx, "DELETE", u.String(), nil, nil)
	if requestError != nil {
		return requestError
	}

	if r.StatusCode != http.StatusNoContent {
		body, _ := ioutil.ReadAll(r.Body) // #nosec
		return fmt.Errorf("Failed with status %v and body %v", r.StatusCode, body)
	}

	return nil
}
